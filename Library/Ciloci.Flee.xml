<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ciloci.Flee</name>
    </assembly>
    <members>
        <member name="T:Ciloci.Flee.CompileExceptionReason">
            <summary>
        Defines values to indicate why compilation of an expression failed.
      </summary><remarks>
        When compilation of an expression fails, an <see cref="T:Ciloci.Flee.ExpressionCompileException"/> will be thrown.
        The <see cref="P:Ciloci.Flee.ExpressionCompileException.Reason">Reason</see> property
        on the exception will contain a value from this enumeration.  You can use that value to determine how to handle the exception.
        For example: if the Reason is a SyntaxError, you can display an error message tailored to syntax errors.
      </remarks>	
        </member>
        <member name="F:Ciloci.Flee.CompileExceptionReason.SyntaxError">
            <summary>The expression text is not parsable because it does not meet the syntax rules of the expression grammar.</summary>	
        </member>
        <member name="F:Ciloci.Flee.CompileExceptionReason.ConstantOverflow">
            <summary>A constant expression cannot be represented in its type.</summary>	
        </member>
        <member name="F:Ciloci.Flee.CompileExceptionReason.TypeMismatch">
            <summary>The operation is invalid for the given type.</summary>	
        </member>
        <member name="F:Ciloci.Flee.CompileExceptionReason.UndefinedName">
            <summary>The expression references a name that cannot be resolved.</summary>	
        </member>
        <member name="F:Ciloci.Flee.CompileExceptionReason.FunctionHasNoReturnValue">
            <summary>The expression calls a function that does not return a value.</summary>	
        </member>
        <member name="F:Ciloci.Flee.CompileExceptionReason.InvalidExplicitCast">
            <summary>The requested explicit cast is not valid for the given types.</summary>	
        </member>
        <member name="F:Ciloci.Flee.CompileExceptionReason.AmbiguousMatch">
            <summary>More than one member matches the required criteria.</summary>	
        </member>
        <member name="F:Ciloci.Flee.CompileExceptionReason.AccessDenied">
            <summary>Access to the specified member is not allowed.</summary>	
        </member>
        <member name="F:Ciloci.Flee.CompileExceptionReason.InvalidFormat">
            <summary>The given value is not in the required format.</summary>	
        </member>
        <member name="T:Ciloci.Flee.ExpressionCompileException">
            <summary>
        The exception thrown when an expression cannot be compiled.
      </summary><remarks>
        This exception is thrown whenever an expression cannot be compiled.
        The <see cref="P:Ciloci.Flee.ExpressionCompileException.Reason">Reason</see> property
        will contain a value indicating the specific cause of the exception.
      </remarks>	
        </member>
        <member name="P:Ciloci.Flee.ExpressionCompileException.Reason">
            <summary>
        Gets the reason why compilation failed.
      </summary><value>A value indicating the cause of the exception</value><remarks>Use this property to determine the reason why compilation failed.</remarks>	
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.Production" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.Node" -->
        <member name="F:PerCederberg.Grammatica.Runtime.Node.parent">
            The parent node.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Node.values">
            The computed node values.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.IsHidden">
             Checks if this node is hidden, i.e. if it should not be
             visible outside the parser.
            
             @return true if the node should be hidden, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.GetId">
             Returns the node type id. This value is set as a unique
             identifier for each type of node, in order to simplify
             later identification.
            
             @return the node type id
            
             @see #Id
            
             @deprecated Use the Id property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.GetName">
             Returns the node name.
            
             @return the node name
            
             @see #Name
            
             @deprecated Use the Name property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.GetStartLine">
             The line number of the first character in this node. If the
             node has child elements, this value will be fetched from
             the first child.
            
             @return the line number of the first character, or
                     -1 if not applicable
            
             @see #StartLine
            
             @deprecated Use the StartLine property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.GetStartColumn">
             The column number of the first character in this node. If
             the node has child elements, this value will be fetched
             from the first child.
            
             @return the column number of the first token character, or
                     -1 if not applicable
            
             @see #StartColumn
            
             @deprecated Use the StartColumn property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.GetEndLine">
             The line number of the last character in this node. If the
             node has child elements, this value will be fetched from
             the last child.
            
             @return the line number of the last token character, or
                     -1 if not applicable
            
             @see #EndLine
            
             @deprecated Use the EndLine property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.GetEndColumn">
             The column number of the last character in this node. If
             the node has child elements, this value will be fetched
             from the last child.
            
             @return the column number of the last token character, or
                     -1 if not applicable
            
             @see #EndColumn
            
             @deprecated Use the EndColumn property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.GetParent">
             Returns the parent node.
            
             @return the parent parse tree node
            
             @see #Parent
            
             @deprecated Use the Parent property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.SetParent(PerCederberg.Grammatica.Runtime.Node)">
             Sets the parent node.
            
             @param parent         the new parent node
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.GetChildCount">
             Returns the number of child nodes.
            
             @return the number of child nodes
            
             @deprecated Use the Count property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.GetDescendantCount">
             Returns the number of descendant nodes.
            
             @return the number of descendant nodes
            
             @since 1.2
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "M:PerCederberg.Grammatica.Runtime.Node.GetChildAt(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Runtime.Node.GetValueCount">
             Returns the number of computed values associated with this
             node. Any number of values can be associated with a node
             through calls to AddValue().
            
             @return the number of values associated with this node
            
             @see #Values
            
             @deprecated Use the Values and Values.Count properties
                 instead.
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "M:PerCederberg.Grammatica.Runtime.Node.GetValue(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Runtime.Node.GetAllValues">
             Returns the list with all the computed values for this
             node. Note that the list is not a copy, so changes will
             affect the values in this node (as it is the same object).
            
             @return a list with all values, or
                     null if no values have been set
            
             @see #Values
            
             @deprecated Use the Values property instead. Note that the
                 Values property will never be null, but possibly empty.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.AddValue(System.Object)">
             Adds a computed value to this node. The computed value may
             be used for storing intermediate results in the parse tree
             during analysis.
            
             @param value          the node value
            
             @see #Values
            
             @deprecated Use the Values property and the Values.Add
                 method instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.AddValues(System.Collections.ArrayList)">
             Adds a set of computed values to this node.
            
             @param values         the vector with node values
            
             @see #Values
            
             @deprecated Use the Values property and the Values.AddRange
                 method instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.RemoveAllValues">
             Removes all computed values stored in this node.
            
             @see #Values
            
             @deprecated Use the Values property and the Values.Clear
                 method instead. Alternatively the Values property can
                 be set to null.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.PrintTo(System.IO.TextWriter)">
             Prints this node and all subnodes to the specified output
             stream.
            
             @param output         the output stream to use
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Node.PrintTo(System.IO.TextWriter,System.String)">
             Prints this node and all subnodes to the specified output
             stream.
            
             @param output         the output stream to use
             @param indent         the indentation string
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Node.Id">
             The node type id property (read-only). This value is set as
             a unique identifier for each type of node, in order to
             simplify later identification.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Node.Name">
             The node name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Node.StartLine">
             The line number property of the first character in this
             node (read-only). If the node has child elements, this
             value will be fetched from the first child.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Node.StartColumn">
             The column number property of the first character in this
             node (read-only). If the node has child elements, this
             value will be fetched from the first child.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Node.EndLine">
             The line number property of the last character in this node
             (read-only). If the node has child elements, this value
             will be fetched from the last child.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Node.EndColumn">
             The column number property of the last character in this
             node (read-only). If the node has child elements, this
             value will be fetched from the last child.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Node.Parent">
             The parent node property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Node.Count">
             The child node count property (read-only).
            
             @since 1.5
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "P:PerCederberg.Grammatica.Runtime.Node.Item(System.Int32)" -->
        <member name="P:PerCederberg.Grammatica.Runtime.Node.Values">
             The node values property. This property provides direct
             access to the list of computed values associated with this
             node during analysis. Note that setting this property to
             null will remove all node values. Any operation on the
             value array list is allowed and is immediately reflected
             through the various value reading and manipulation methods.
            
             @since 1.5
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Production.pattern">
            The production pattern used for this production.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Production.children">
            The child nodes.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Production.#ctor(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Creates a new production node.
            
             @param pattern        the production pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Production.AddChild(PerCederberg.Grammatica.Runtime.Node)">
             Adds a child node. The node will be added last in the list of
             children.
            
             @param child          the child node to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Production.GetPattern">
             Returns the production pattern for this production.
            
             @return the production pattern
            
             @see #Pattern
            
             @deprecated Use the Pattern property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Production.IsHidden">
             Checks if this node is hidden, i.e. if it should not be visible
             outside the parser.
            
             @return true if the node should be hidden, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Production.ToString">
             Returns a string representation of this production.
            
             @return a string representation of this production
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Production.Id">
             The node type id property (read-only). This value is set as
             a unique identifier for each type of node, in order to
             simplify later identification.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Production.Name">
             The node name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Production.Count">
             The child node count property (read-only).
            
             @since 1.5
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "P:PerCederberg.Grammatica.Runtime.Production.Item(System.Int32)" -->
        <member name="P:PerCederberg.Grammatica.Runtime.Production.Pattern">
             The production pattern property (read-only). This property
             contains the production pattern linked to this production.
            
             @since 1.5
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.ReaderBuffer" -->
        <member name="F:PerCederberg.Grammatica.Runtime.ReaderBuffer.BLOCK_SIZE">
            The stream reading block size. All reads from the underlying
            character stream will be made in multiples of this block size.
            Also the character buffer size will always be a multiple of
            this factor.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ReaderBuffer.buffer">
            The character buffer.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ReaderBuffer.pos">
            The current character buffer position.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ReaderBuffer.length">
            The number of characters in the buffer.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ReaderBuffer.input">
            The input source character reader.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ReaderBuffer.line">
            The line number of the next character to read. This value will
            be incremented when reading past line breaks.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ReaderBuffer.column">
            The column number of the next character to read. This value
            will be updated for every character read.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ReaderBuffer.#ctor(System.IO.TextReader)">
             Creates a new tokenizer character buffer.
            
             @param input           the input source character reader
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ReaderBuffer.Dispose">
            Discards all resources used by this buffer. This will also
            close the source input stream. Disposing a previously disposed
            buffer has no effect.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ReaderBuffer.Substring(System.Int32,System.Int32)">
             Returns a substring already in the buffer. Note that this
             method may behave in unexpected ways when performing
             operations that modifies the buffer content.
            
             @param index          the start index, inclusive
             @param length         the substring length
            
             @return the substring specified
            
             @throws IndexOutOfBoundsException if one of the indices were
                         negative or not less than (or equal) than length()
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ReaderBuffer.ToString">
             Returns the current content of the buffer as a string. Note
             that content before the current position will also be
             returned.
            
             @return the current buffer content
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "M:PerCederberg.Grammatica.Runtime.ReaderBuffer.Peek(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Runtime.ReaderBuffer.Read(System.Int32)">
             Reads the specified number of characters from the current
             position. This will also move the current position forward.
             This method will not attempt to move beyond the end of the
             input source stream. When reaching the end of file, the
             returned string might be shorter than requested. Any
             remaining characters will always be returned before returning
             null.
            
             @param offset         the character offset, from 0 and up
            
             @return the string containing the characters read, or
                     null no more characters remain in the buffer
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ReaderBuffer.UpdateLineColumnNumbers(System.Int32)">
             Updates the line and column numbers counters. This method
             requires all the characters to be processed (i.e. returned
             as read) to be present in the buffer, starting at the
             current buffer position.
            
             @param offset          the number of characters to process
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ReaderBuffer.EnsureBuffered(System.Int32)">
             Ensures that the specified offset is read into the buffer.
             This method will read characters from the input stream and
             appends them to the buffer if needed. This method is safe to
             call even after end of file has been reached. This method also
             handles removal of characters at the beginning of the buffer
             once the current position is high enough. It will also enlarge
             the buffer as needed.
            
             @param offset         the read offset, from 0 and up
            
             @throws IOException if an error was encountered while reading
                         the input stream
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ReaderBuffer.EnsureCapacity(System.Int32)">
             Ensures that the buffer has at least the specified capacity.
            
             @param size           the minimum buffer size
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ReaderBuffer.Position">
            The current buffer position property (read-only).
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ReaderBuffer.LineNumber">
            The current line number property (read-only). This number
            is the line number of the next character to read.
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ReaderBuffer.ColumnNumber">
            The current column number property (read-only). This number
            is the column number of the next character to read.
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ReaderBuffer.Length">
            The current character buffer length property (read-only).
            Note that the length may increase (and decrease) as more
            characters are read from the input source or removed to
            free up space.
        </member>
        <member name="T:Ciloci.Flee.Utility">
            <summary>
            Holds various shared utility methods
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ciloci.Flee.Utility.GetSimpleOverloadedOperator(System.String,System.Type,System.Type)">
            <summary>
            Find a simple (unary) overloaded operator
            </summary>
            <param name="name">The name of the operator</param>
            <param name="sourceType">The type to convert from</param>
            <param name="destType">The type to convert to</param>
            <returns>The operator's method or null of no match is found</returns>
        </member>
        <member name="M:Ciloci.Flee.Utility.SimpleOverloadedOperatorFilter(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Matches simple overloaded operators
            </summary>
            <param name="member"></param>
            <param name="value"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Ciloci.Flee.CompileErrorResourceKeys">
            <summary>
            Resource keys for compile error messages
            </summary>
            <remarks></remarks>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.TokenPattern" -->
        <member name="F:PerCederberg.Grammatica.Runtime.TokenPattern.m_id">
            The token pattern identity.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenPattern.m_name">
            The token pattern name.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenPattern.m_type">
            The token pattern type.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenPattern.m_pattern">
            The token pattern.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenPattern.error">
             The token error flag. If this flag is set, it means that an
             error should be reported if the token is found. The error
             message is present in the errorMessage variable.
            
             @see #errorMessage
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenPattern.errorMessage">
             The token error message. This message will only be set if the
             token error flag is set.
            
             @see #error
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenPattern.ignore">
             The token ignore flag. If this flag is set, it means that the
             token should be ignored if found. If an ignore message is
             present in the ignoreMessage variable, it will also be reported
             as a warning.
            
             @see #ignoreMessage
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenPattern.ignoreMessage">
             The token ignore message. If this message is set when the token
             ignore flag is also set, a warning message will be printed if
             the token is found.
            
             @see #ignore
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenPattern.debugInfo">
            The optional debug information message. This is normally set
            when the token pattern is analyzed by the tokenizer.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.#ctor(System.Int32,System.String,PerCederberg.Grammatica.Runtime.TokenPattern.PatternType,System.String)">
             Creates a new token pattern.
            
             @param id             the token pattern id
             @param name           the token pattern name
             @param type           the token pattern type
             @param pattern        the token pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.GetId">
             Returns the unique token pattern identity value.
            
             @return the token pattern id
            
             @see #Id
            
             @deprecated Use the Id property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.GetName">
             Returns the token pattern name.
            
             @return the token pattern name
            
             @see #Name
            
             @deprecated Use the Name property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.GetPatternType">
             Returns the token pattern type.
            
             @return the token pattern type
            
             @see #Type
            
             @deprecated Use the Type property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.GetPattern">
             Returns te token pattern.
            
             @return the token pattern
            
             @see #Pattern
            
             @deprecated Use the Pattern property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.IsError">
             Checks if the pattern corresponds to an error token. If this
             is true, it means that an error should be reported if a
             matching token is found.
            
             @return true if the pattern maps to an error token, or
                     false otherwise
            
             @see #Error
            
             @deprecated Use the Error property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.GetErrorMessage">
             Returns the token error message if the pattern corresponds to
             an error token.
            
             @return the token error message
            
             @see #ErrorMessage
            
             @deprecated Use the ErrorMessage property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.SetError">
             Sets the token error flag and assigns a default error message.
            
             @see #Error
            
             @deprecated Use the Error property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.SetError(System.String)">
             Sets the token error flag and assigns the specified error
             message.
            
             @param message        the error message to display
            
             @see #ErrorMessage
            
             @deprecated Use the ErrorMessage property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.IsIgnore">
             Checks if the pattern corresponds to an ignored token. If this
             is true, it means that the token should be ignored if found.
            
             @return true if the pattern maps to an ignored token, or
                     false otherwise
            
             @see #Ignore
            
             @deprecated Use the Ignore property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.GetIgnoreMessage">
             Returns the token ignore message if the pattern corresponds to
             an ignored token.
            
             @return the token ignore message
            
             @see #IgnoreMessage
            
             @deprecated Use the IgnoreMessage property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.SetIgnore">
             Sets the token ignore flag and clears the ignore message.
            
             @see #Ignore
            
             @deprecated Use the Ignore property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.SetIgnore(System.String)">
             Sets the token ignore flag and assigns the specified ignore
             message.
            
             @param message        the ignore message to display
            
             @see #IgnoreMessage
            
             @deprecated Use the IgnoreMessage property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.ToString">
             Returns a string representation of this object.
            
             @return a token pattern string representation
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenPattern.ToShortString">
             Returns a short string representation of this object.
            
             @return a short string representation of this object
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.TokenPattern.Id">
             The token pattern identity property (read-only). This
             property contains the unique token pattern identity value.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.TokenPattern.Name">
             The token pattern name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.TokenPattern.Type">
             The token pattern type property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.TokenPattern.Pattern">
             The token pattern property (read-only). This property
             contains the actual pattern (string or regexp) which have
             to be matched.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.TokenPattern.Error">
             The error flag property. If this property is true, the
             token pattern corresponds to an error token and an error
             should be reported if a match is found. When setting this
             property to true, a default error message is created if
             none was previously set.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.TokenPattern.ErrorMessage">
             The token error message property. The error message is
             printed whenever the token is matched. Setting the error
             message property also sets the error flag to true.
            
             @see #Error
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.TokenPattern.Ignore">
             The ignore flag property. If this property is true, the
             token pattern corresponds to an ignore token and should be
             skipped if a match is found.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.TokenPattern.IgnoreMessage">
             The token ignore message property. The ignore message is
             printed whenever the token is matched. Setting the ignore
             message property also sets the ignore flag to true.
            
             @see #Ignore
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.TokenPattern.DebugInfo">
             The token debug info message property. This is normally be
             set when the token pattern is analyzed by the tokenizer.
            
             @since 1.5
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.TokenPattern.PatternType">
            The pattern type enumeration.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenPattern.PatternType.STRING">
            The string pattern type is used for tokens that only
            match an exact string.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenPattern.PatternType.REGEXP">
            The regular expression pattern type is used for tokens
            that match a regular expression.
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.Tokenizer" -->
        <member name="F:PerCederberg.Grammatica.Runtime.Tokenizer.useTokenList">
            The token list feature flag.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Tokenizer.stringDfaMatcher">
            The string DFA token matcher. This token matcher uses a
            deterministic finite automaton (DFA) implementation and is
            used for all string token patterns. It has a slight speed
            advantage to the NFA implementation, but should be equivalent
            on memory usage.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Tokenizer.nfaMatcher">
            The regular expression NFA token matcher. This token matcher
            uses a non-deterministic finite automaton (DFA) implementation
            and is used for most regular expression token patterns. It is
            somewhat faster than the other recursive regular expression
            implementations available, but doesn't support the full
            syntax. It conserves memory by using a fast queue instead of
            the stack during processing (no stack overflow).
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Tokenizer.regExpMatcher">
            The regular expression token matcher. This token matcher is
            used for complex regular expressions, but should be avoided
            due to possibly degraded speed and memory usage compared to
            the automaton implementations.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Tokenizer.buffer">
            The character stream reader buffer.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Tokenizer.lastMatch">
            The last token match found.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Tokenizer.previousToken">
            The previous token in the token list.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.#ctor(System.IO.TextReader)">
             Creates a new case-sensitive tokenizer for the specified
             input stream.
            
             @param input          the input stream to read
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.#ctor(System.IO.TextReader,System.Boolean)">
             Creates a new tokenizer for the specified input stream. The
             tokenizer can be set to process tokens either in
             case-sensitive or case-insensitive mode.
            
             @param input          the input stream to read
             @param ignoreCase     the character case ignore flag
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.GetUseTokenList">
             Checks if the token list feature is used. The token list
             feature makes all tokens (including ignored tokens) link to
             each other in a linked list. By default the token list feature
             is not used.
            
             @return true if the token list feature is used, or
                     false otherwise
            
             @see #UseTokenList
             @see #SetUseTokenList
             @see Token#GetPreviousToken
             @see Token#GetNextToken
            
             @since 1.4
            
             @deprecated Use the UseTokenList property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.SetUseTokenList(System.Boolean)">
             Sets the token list feature flag. The token list feature makes
             all tokens (including ignored tokens) link to each other in a
             linked list when active. By default the token list feature is
             not used.
            
             @param useTokenList   the token list feature flag
            
             @see #UseTokenList
             @see #GetUseTokenList
             @see Token#GetPreviousToken
             @see Token#GetNextToken
            
             @since 1.4
            
             @deprecated Use the UseTokenList property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.GetPatternDescription(System.Int32)">
             Returns a description of the token pattern with the
             specified id.
            
             @param id             the token pattern id
            
             @return the token pattern description, or
                     null if not present
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.GetCurrentLine">
             Returns the current line number. This number will be the line
             number of the next token returned.
            
             @return the current line number
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.GetCurrentColumn">
             Returns the current column number. This number will be the
             column number of the next token returned.
            
             @return the current column number
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.AddPattern(PerCederberg.Grammatica.Runtime.TokenPattern)">
             Adds a new token pattern to the tokenizer. The pattern will be
             added last in the list, choosing a previous token pattern in
             case two matches the same string.
            
             @param pattern        the pattern to add
            
             @throws ParserCreationException if the pattern couldn't be
                         added to the tokenizer
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.Reset(System.IO.TextReader)">
             Resets this tokenizer for usage with another input stream.
             This method will clear all the internal state in the
             tokenizer as well as close the previous input stream. It
             is normally called in order to reuse a parser and
             tokenizer pair with multiple input streams, thereby
             avoiding the cost of re-analyzing the grammar structures.
            
             @param input          the new input stream to read
            
             @see Parser#reset(Reader)
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.Next">
             Finds the next token on the stream. This method will return
             null when end of file has been reached. It will return a
             parse exception if no token matched the input stream, or if
             a token pattern with the error flag set matched. Any tokens
             matching a token pattern with the ignore flag set will be
             silently ignored and the next token will be returned.
            
             @return the next token found, or
                     null if end of file was encountered
            
             @throws ParseException if the input stream couldn't be read or
                         parsed correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.NextToken">
             Finds the next token on the stream. This method will return
             null when end of file has been reached. It will return a
             parse exception if no token matched the input stream.
            
             @return the next token found, or
                     null if end of file was encountered
            
             @throws ParseException if the input stream couldn't be read or
                         parsed correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.NewToken(PerCederberg.Grammatica.Runtime.TokenPattern,System.String,System.Int32,System.Int32)">
             Factory method for creating a new token. This method can be
             overridden to provide other token implementations than the
             default one.
            
             @param pattern        the token pattern
             @param image          the token image (i.e. characters)
             @param line           the line number of the first character
             @param column         the column number of the first character
            
             @return the token created
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Tokenizer.ToString">
             Returns a string representation of this object. The returned
             string will contain the details of all the token patterns
             contained in this tokenizer.
            
             @return a detailed string representation
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Tokenizer.UseTokenList">
             The token list flag property. If the token list flag is
             set, all tokens (including ignored tokens) link to each
             other in a double-linked list. By default the token list
             flag is set to false.
            
             @see Token#Previous
             @see Token#Next
            
             @since 1.5
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.TokenMatcher">
            A token pattern matcher. This class is the base class for the
            various types of token matchers that exist. The token matcher
            checks for matches with the tokenizer buffer, and maintains the
            state of the last match.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenMatcher.patterns">
            The array of token patterns.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenMatcher.ignoreCase">
            The ignore character case flag.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenMatcher.#ctor(System.Boolean)">
             Creates a new token matcher.
            
             @param ignoreCase      the character case ignore flag
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenMatcher.Match(PerCederberg.Grammatica.Runtime.ReaderBuffer,PerCederberg.Grammatica.Runtime.TokenMatch)">
             Searches for matching token patterns at the start of the
             input stream. If a match is found, the token match object
             is updated.
            
             @param buffer         the input buffer to check
             @param match          the token match to update
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenMatcher.GetPattern(System.Int32)">
             Returns the token pattern with the specified id. Only
             token patterns handled by this matcher can be returned.
            
             @param id         the token pattern id
            
             @return the token pattern found, or
                     null if not found
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenMatcher.AddPattern(PerCederberg.Grammatica.Runtime.TokenPattern)">
             Adds a string token pattern to this matcher.
            
             @param pattern        the pattern to add
            
             @throws Exception if the pattern couldn't be added to the matcher
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenMatcher.ToString">
             Returns a string representation of this matcher. This will
             contain all the token patterns.
            
             @return a detailed string representation of this matcher
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.StringDFAMatcher">
            A token pattern matcher using a DFA for string tokens. This
            class only supports string tokens and must be complemented
            with another matcher for regular expressions. Internally it
            uses a DFA to provide high performance.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.StringDFAMatcher.automaton">
            The deterministic finite state automaton used for
            matching.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.StringDFAMatcher.#ctor(System.Boolean)">
             Creates a new string token matcher.
            
             @param ignoreCase      the character case ignore flag
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.StringDFAMatcher.AddPattern(PerCederberg.Grammatica.Runtime.TokenPattern)">
             Adds a string token pattern to this matcher.
            
             @param pattern        the pattern to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.StringDFAMatcher.Match(PerCederberg.Grammatica.Runtime.ReaderBuffer,PerCederberg.Grammatica.Runtime.TokenMatch)">
             Searches for matching token patterns at the start of the
             input stream. If a match is found, the token match object
             is updated.
            
             @param buffer         the input buffer to check
             @param match          the token match to update
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFAMatcher">
            A token pattern matcher using a NFA for both string and
            regular expression tokens. This class has limited support for
            regular expressions and must be complemented with another
            matcher providing full regular expression support. Internally
            it uses a NFA to provide high performance and low memory
            usage.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFAMatcher.automaton">
            The non-deterministic finite state automaton used for
            matching.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAMatcher.#ctor(System.Boolean)">
             Creates a new NFA token matcher.
            
             @param ignoreCase      the character case ignore flag
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAMatcher.AddPattern(PerCederberg.Grammatica.Runtime.TokenPattern)">
             Adds a token pattern to this matcher.
            
             @param pattern        the pattern to add
            
             @throws Exception if the pattern couldn't be added to the matcher
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAMatcher.Match(PerCederberg.Grammatica.Runtime.ReaderBuffer,PerCederberg.Grammatica.Runtime.TokenMatch)">
             Searches for matching token patterns at the start of the
             input stream. If a match is found, the token match object
             is updated.
            
             @param buffer         the input buffer to check
             @param match          the token match to update
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.RegExpMatcher">
            A token pattern matcher for complex regular expressions. This
            class only supports regular expression tokens and must be
            complemented with another matcher for string tokens.
            Internally it uses the Grammatica RE package for high
            performance or the native java.util.regex package for maximum
            compatibility.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RegExpMatcher.regExps">
            The regular expression handlers.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RegExpMatcher.#ctor(System.Boolean)">
             Creates a new regular expression token matcher.
            
             @param ignoreCase      the character case ignore flag
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RegExpMatcher.AddPattern(PerCederberg.Grammatica.Runtime.TokenPattern)">
             Adds a regular expression token pattern to this matcher.
            
             @param pattern        the pattern to add
            
             @throws Exception if the pattern couldn't be added to the matcher
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RegExpMatcher.Match(PerCederberg.Grammatica.Runtime.ReaderBuffer,PerCederberg.Grammatica.Runtime.TokenMatch)">
             Searches for matching token patterns at the start of the
             input stream. If a match is found, the token match object
             is updated.
            
             @param buffer         the input buffer to check
             @param match          the token match to update
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.REHandler">
            The regular expression handler base class.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.REHandler.Match(PerCederberg.Grammatica.Runtime.ReaderBuffer)">
             Checks if the start of the input stream matches this
             regular expression.
            
             @param buffer         the input buffer to check
            
             @return the longest match found, or
                     zero (0) if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.GrammaticaRE">
            The Grammatica built-in regular expression handler.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.GrammaticaRE.regExp">
            The compiled regular expression.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.GrammaticaRE.matcher">
            The regular expression matcher to use.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.GrammaticaRE.#ctor(System.String,System.Boolean)">
             Creates a new Grammatica regular expression handler.
            
             @param regex          the regular expression text
             @param ignoreCase      the character case ignore flag
            
             @throws Exception if the regular expression contained
                         invalid syntax
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.GrammaticaRE.Match(PerCederberg.Grammatica.Runtime.ReaderBuffer)">
             Checks if the start of the input stream matches this
             regular expression.
            
             @param buffer         the input buffer to check
            
             @return the longest match found, or
                     zero (0) if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.SystemRE">
            The .NET system regular expression handler.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.SystemRE.reg">
            The parsed regular expression.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.SystemRE.#ctor(System.String,System.Boolean)">
             Creates a new .NET system regular expression handler.
            
             @param regex          the regular expression text
             @param ignoreCase      the character case ignore flag
            
             @throws Exception if the regular expression contained
                         invalid syntax
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.SystemRE.Match(PerCederberg.Grammatica.Runtime.ReaderBuffer)">
             Checks if the start of the input stream matches this
             regular expression.
            
             @param buffer         the input buffer to check
            
             @return the longest match found, or
                     zero (0) if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.ProductionPattern" -->
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPattern.id">
            The production pattern identity.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPattern.name">
            The production pattern name.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPattern.synthetic">
            The synthectic production flag. If this flag is set, the
            production identified by this pattern has been artificially
            inserted into the grammar.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPattern.alternatives">
            The list of production pattern alternatives.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPattern.defaultAlt">
            The default production pattern alternative. This alternative
            is used when no other alternatives match. It may be set to
            -1, meaning that there is no default (or fallback) alternative.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPattern.lookAhead">
            The look-ahead set associated with this pattern.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPattern.#ctor(System.Int32,System.String)">
             Creates a new production pattern.
            
             @param id             the production pattern id
             @param name           the production pattern name
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPattern.GetId">
             Returns the unique production pattern identity value.
            
             @return the production pattern id
            
             @see #Id
            
             @deprecated Use the Id property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPattern.GetName">
             Returns the production pattern name.
            
             @return the production pattern name
            
             @see #Name
            
             @deprecated Use the Name property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPattern.IsSyntetic">
             Checks if the synthetic production flag is set. If this
             flag is set, the production identified by this pattern has
             been artificially inserted into the grammar. No parse tree
             nodes will be created for such nodes, instead the child
             nodes will be added directly to the parent node.
            
             @return true if this production pattern is synthetic, or
                     false otherwise
            
             @see #Synthetic
            
             @deprecated Use the Synthetic property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPattern.SetSyntetic(System.Boolean)">
             Sets the synthetic production pattern flag. If this flag is set,
             the production identified by this pattern has been artificially
             inserted into the grammar. By default this flag is set to
             false.
            
             @param syntetic       the new value of the synthetic flag
            
             @see #Synthetic
            
             @deprecated Use the Synthetic property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPattern.GetAlternativeCount">
             Returns the number of alternatives in this pattern.
            
             @return the number of alternatives in this pattern
            
             @see #Count
            
             @deprecated Use the Count property instead.
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "M:PerCederberg.Grammatica.Runtime.ProductionPattern.GetAlternative(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPattern.IsLeftRecursive">
             Checks if this pattern is recursive on the left-hand side.
             This method checks if any of the production pattern
             alternatives is left-recursive.
            
             @return true if at least one alternative is left recursive, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPattern.IsRightRecursive">
             Checks if this pattern is recursive on the right-hand side.
             This method checks if any of the production pattern
             alternatives is right-recursive.
            
             @return true if at least one alternative is right recursive, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPattern.IsMatchingEmpty">
             Checks if this pattern would match an empty stream of
             tokens. This method checks if any one of the production
             pattern alternatives would match the empty token stream.
            
             @return true if at least one alternative match no tokens, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPattern.AddAlternative(PerCederberg.Grammatica.Runtime.ProductionPatternAlternative)">
             Adds a production pattern alternative.
            
             @param alt            the production pattern alternative to add
            
             @throws ParserCreationException if an identical alternative has
                         already been added
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPattern.ToString">
             Returns a string representation of this object.
            
             @return a token string representation
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPattern.Id">
             The production pattern identity property (read-only). This
             property contains the unique identity value.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPattern.Name">
             The production pattern name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPattern.Synthetic">
             The synthetic production pattern property. If this property
             is set, the production identified by this pattern has been
             artificially inserted into the grammar. No parse tree nodes
             will be created for such nodes, instead the child nodes
             will be added directly to the parent node. By default this
             property is set to false.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPattern.LookAhead">
            The look-ahead set property. This property contains the
            look-ahead set associated with this alternative.
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPattern.DefaultAlternative">
            The default pattern alternative property. The default
            alternative is used when no other alternative matches. The
            default alternative must previously have been added to the
            list of alternatives. This property is set to null if no
            default pattern alternative has been set.
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPattern.Count">
             The production pattern alternative count property
             (read-only).
            
             @since 1.5
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "P:PerCederberg.Grammatica.Runtime.ProductionPattern.Item(System.Int32)" -->
        <member name="T:Ciloci.Flee.IExpression">
            <summary>Interface implemented by all expressions</summary><remarks>This is the base interface that exposes members common to both dynamic and generic expressions.</remarks>	
        </member>
        <member name="M:Ciloci.Flee.IExpression.Clone">
            <summary>
        Creates a clone of the current expression
      </summary><returns>A copy of the current expression with its own set of variables</returns><remarks>Use this method when you need to create a copy of an existing expression without the parsing/compilation overhead</remarks>	
        </member>
        <member name="P:Ciloci.Flee.IExpression.Text">
            <summary>Gets the text the expression was created with</summary><value>A string with the expression's text</value><remarks>Use this property to get the text that was used to compile the expression.</remarks>	
        </member>
        <member name="P:Ciloci.Flee.IExpression.Info">
            <summary>
        Gets the expression's <see cref="T:Ciloci.Flee.ExpressionInfo"/> instance.
      </summary><value>The ExpressionInfo instance.</value><remarks>
        Use this property to access the expression's ExpressionInfo instance which holds information about the expression.
      </remarks>	
        </member>
        <member name="P:Ciloci.Flee.IExpression.Context">
            <summary>Gets the context the expression was created with</summary><value>
        The expression's <see cref="T:Ciloci.Flee.ExpressionContext"/> instance
      </value><remarks>Use this property to get the context that was used to compile the expression.</remarks>	
        </member>
        <member name="P:Ciloci.Flee.IExpression.Owner">
            <summary>Gets or sets the expression's owner</summary><value>
        The expression's owner instance.  Must be of the same type as the expression's original owner.
      </value><remarks>Use this property to get or set the instance of the expression's owner.</remarks>	
        </member>
        <member name="T:Ciloci.Flee.IDynamicExpression">
            <summary>Interface implemented by all expressions that evaluate to an Object</summary><remarks>This is the interface that dynamic expressions must implement</remarks>	
        </member>
        <member name="M:Ciloci.Flee.IDynamicExpression.Evaluate">
            <summary>Evaluates the dynamic expression</summary><returns>An Object instance that represents the result of evaluating the expression</returns><remarks>Use this method to evaluate the expression.</remarks>	
        </member>
        <member name="T:Ciloci.Flee.IGenericExpression`1">
            <summary>Interface implemented by all expressions that evaluate to a specific type</summary><typeparam name="T">The type that the expression will evaluate to</typeparam><remarks>This is the interface that generic expressions must implement</remarks>	
        </member>
        <member name="M:Ciloci.Flee.IGenericExpression`1.Evaluate">
            <summary>Evaluates the generic expression</summary><returns>The result of evaluating the expression</returns><remarks>Use this method to evaluate the expression.</remarks>	
        </member>
        <member name="T:Ciloci.Flee.ExpressionInfo">
            <summary>
        Holds information about a compiled expression.
      </summary><remarks>
        This class holds information about an expression after it has been compiled.  For example: you can use this class to find out what variables
        an expression uses.
      </remarks>	
        </member>
        <member name="M:Ciloci.Flee.ExpressionInfo.GetReferencedVariables">
            <summary>
        Gets the variables that are used in an expression.
      </summary><returns>A string array containing all the variables used in the expression.</returns><remarks>Use this method when you need to get a list of all variables used in an expression.</remarks>	
        </member>
        <member name="T:Ciloci.Flee.ExpressionOwnerMemberAccessAttribute">
            <summary>
        Specifies whether access to a member on the expression owner is allowed.
      </summary><remarks>
        Use this attribute to control the accessibility of individual members on the expression owner.  The access specified in
        this attribute overrides the access level specified using the <see cref="P:Ciloci.Flee.ExpressionOptions.OwnerMemberAccess"/> property.
      </remarks>	
        </member>
        <member name="M:Ciloci.Flee.ExpressionOwnerMemberAccessAttribute.#ctor(System.Boolean)">
            <summary>
        Initializes the attribute with the desired access.
      </summary><param name="allowAccess">True to allow the member to be used in an expression;False otherwise</param><remarks>Initializes the attribute with the desired access.</remarks>	
        </member>
        <member name="T:Ciloci.Flee.ResolveVariableTypeEventArgs">
            <summary>
        Provides the data for the ResolveVariableType event.
      </summary><remarks>Use this class to provide the type of an on-demand variable.</remarks>
        </member>
        <member name="P:Ciloci.Flee.ResolveVariableTypeEventArgs.VariableName">
            <summary>
        Gets the name of an on-demand variable.
      </summary><value>The name of the variable</value><remarks>
        Use this property to get the name of the variable whose type needs to be resolved.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ResolveVariableTypeEventArgs.VariableType">
            <summary>
        Gets or sets the type of an on-demand variable.
      </summary><value>The type of the variable</value><remarks>
        Use this property to get or set the type of the on-demand variable.
      </remarks>
        </member>
        <member name="T:Ciloci.Flee.ResolveVariableValueEventArgs">
            <summary>
        Provides the data for the ResolveVariableValue event.
      </summary><remarks>Use this class to provide the value of an on-demand variable.</remarks>
        </member>
        <member name="P:Ciloci.Flee.ResolveVariableValueEventArgs.VariableName">
            <summary>
        Gets the name of an on-demand variable.
      </summary><value>The name of the variable</value><remarks>
        Use this property to get the name of the variable whose value needs to be resolved.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ResolveVariableValueEventArgs.VariableType">
            <summary>
        Gets the type of an on-demand variable.
      </summary><value>The type of the variable</value><remarks>
        Use this property to get the type of the variable whose value needs to be resolved.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ResolveVariableValueEventArgs.VariableValue">
            <summary>
        Gets or sets the value of an on-demand variable.
      </summary><value>The value of the variable</value><remarks>
        Use this property to get or set the value of an on-demand variable.
      </remarks>
        </member>
        <member name="T:Ciloci.Flee.ResolveFunctionEventArgs">
            <summary>
        Provides the data for the ResolveFunction event.
      </summary><remarks>Use this class to provide the return type of an on-demand function.</remarks>
        </member>
        <member name="P:Ciloci.Flee.ResolveFunctionEventArgs.FunctionName">
            <summary>
        Gets the name of the on-demand function being resolved.
      </summary><value>The name of the function</value><remarks>
        Use this property to get the name of the on-demand function being resolved.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ResolveFunctionEventArgs.ArgumentTypes">
            <summary>
        Gets the types of the arguments to the on-demand function being resolved.
      </summary><value>An array with the type of each argument</value><remarks>
        Use this property to get the types of the arguments to the on-demand function being resolved.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ResolveFunctionEventArgs.ReturnType">
            <summary>
        Gets or sets the return type of the on-demand function being resolved.
      </summary><value>The return type of the function</value><remarks>
        Use this property to set the return type of the on-demand function being resolved.
      </remarks>
        </member>
        <member name="T:Ciloci.Flee.InvokeFunctionEventArgs">
            <summary>
        Provides the data for the InvokeFunction event.
      </summary><remarks>Use this class to provide the return value of an on-demand function.</remarks>
        </member>
        <member name="P:Ciloci.Flee.InvokeFunctionEventArgs.FunctionName">
            <summary>
        Gets the name of the on-demand function being invoked.
      </summary><value>The name of the function</value><remarks>
        Use this property to get the name of the on-demand function being invoked.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.InvokeFunctionEventArgs.Arguments">
            <summary>
        Gets the values of the arguments to the on-demand function being invoked.
      </summary><value>An array with the values of each argument</value><remarks>
        Use this property to get the values of the arguments to the on-demand function being invoked.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.InvokeFunctionEventArgs.Result">
            <summary>
        Gets or sets the result of the on-demand function being invoked.
      </summary><value>The return value of the function</value><remarks>
        Use this property to set the return value of the on-demand function being invoked.
      </remarks>
        </member>
        <member name="T:Ciloci.Flee.RealLiteralDataType">
            <summary>
        Defines values to indicate the data type to use for storing real literals.
      </summary>	
        </member>
        <member name="F:Ciloci.Flee.RealLiteralDataType.Single">
            <summary>Specifies that real literals will be stored using the <see cref="T:System.Single"/> data type.</summary>	
        </member>
        <member name="F:Ciloci.Flee.RealLiteralDataType.Double">
            <summary>
        Specifies that real literals will be stored using the <see cref="T:System.Double"/> data type.
      </summary>	
        </member>
        <member name="F:Ciloci.Flee.RealLiteralDataType.Decimal">
            <summary>
        Specifies that real literals will be stored using the <see cref="T:System.Decimal"/> data type.
      </summary>	
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.TokenMatch" -->
        <member name="F:PerCederberg.Grammatica.Runtime.TokenMatch.length">
            The length of the longest match.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenMatch.pattern">
            The pattern in the longest match.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenMatch.Clear">
            Clears the current match information.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenMatch.Update(System.Int32,PerCederberg.Grammatica.Runtime.TokenPattern)">
             Updates this match with new values. The new values will only
             be considered if the length is longer than any previous match
             found.
            
             @param length         the matched length
             @param pattern        the matched pattern
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.TokenMatch.Length">
            The length of the longest match found (read-only).
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.TokenMatch.Pattern">
            The token pattern for the longest match found (read-only).
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative" -->
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.pattern">
            The production pattern.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.elements">
            The element list.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.lookAhead">
            The look-ahead set associated with this alternative.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.#ctor">
            Creates a new production pattern alternative.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.GetPattern">
             Returns the production pattern containing this alternative.
            
             @return the production pattern for this alternative
            
             @see #Pattern
            
             @deprecated Use the Pattern property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.GetElementCount">
             Returns the number of elements in this alternative.
            
             @return the number of elements in this alternative
            
             @see #Count
            
             @deprecated Use the Count property instead.
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.GetElement(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.IsLeftRecursive">
             Checks if this alternative is recursive on the left-hand
             side. This method checks all the possible left side
             elements and returns true if the pattern itself is among
             them.
            
             @return true if the alternative is left side recursive, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.IsRightRecursive">
             Checks if this alternative is recursive on the right-hand side.
             This method checks all the possible right side elements and
             returns true if the pattern itself is among them.
            
             @return true if the alternative is right side recursive, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.IsMatchingEmpty">
             Checks if this alternative would match an empty stream of
             tokens. This check is equivalent of getMinElementCount()
             returning zero (0).
            
             @return true if the rule can match an empty token stream, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.SetPattern(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Changes the production pattern containing this alternative.
             This method should only be called by the production pattern
             class.
            
             @param pattern        the new production pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.GetMinElementCount">
             Returns the minimum number of elements needed to satisfy
             this alternative. The value returned is the sum of all the
             elements minimum count.
            
             @return the minimum number of elements
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.GetMaxElementCount">
             Returns the maximum number of elements needed to satisfy
             this alternative. The value returned is the sum of all the
             elements maximum count.
            
             @return the maximum number of elements
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.AddToken(System.Int32,System.Int32,System.Int32)">
             Adds a token to this alternative. The token is appended to
             the end of the element list. The multiplicity values
             specified define if the token is optional or required, and
             if it can be repeated.
            
             @param id             the token (pattern) id
             @param min            the minimum number of occurancies
             @param max            the maximum number of occurancies, or
                                   -1 for infinite
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.AddProduction(System.Int32,System.Int32,System.Int32)">
             Adds a production to this alternative. The production is
             appended to the end of the element list. The multiplicity
             values specified define if the production is optional or
             required, and if it can be repeated.
            
             @param id             the production (pattern) id
             @param min            the minimum number of occurancies
             @param max            the maximum number of occurancies, or
                                   -1 for infinite
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.AddElement(PerCederberg.Grammatica.Runtime.ProductionPatternElement)">
             Adds a production pattern element to this alternative. The
             element is appended to the end of the element list.
            
             @param elem           the production pattern element
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.AddElement(PerCederberg.Grammatica.Runtime.ProductionPatternElement,System.Int32,System.Int32)">
             Adds a production pattern element to this alternative. The
             multiplicity values in the element will be overridden with
             the specified values. The element is appended to the end of
             the element list.
            
             @param elem           the production pattern element
             @param min            the minimum number of occurancies
             @param max            the maximum number of occurancies, or
                                   -1 for infinite
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.Equals(System.Object)">
             Checks if this object is equal to another. This method only
             returns true for another production pattern alternative
             with identical elements in the same order.
            
             @param obj            the object to compare with
            
             @return true if the object is identical to this one, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.Equals(PerCederberg.Grammatica.Runtime.ProductionPatternAlternative)">
             Checks if this alternative is equal to another. This method
             returns true if the other production pattern alternative
             has identical elements in the same order.
            
             @param alt            the alternative to compare with
            
             @return true if the object is identical to this one, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.GetHashCode">
             Returns a hash code for this object.
            
             @return a hash code for this object
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.ToString">
             Returns a string representation of this object.
            
             @return a token string representation
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.Pattern">
             The production pattern property (read-only). This property
             contains the pattern having this alternative.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.LookAhead">
            The look-ahead set property. This property contains the
            look-ahead set associated with this alternative.
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.Count">
             The production pattern element count property (read-only).
            
             @since 1.5
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "P:PerCederberg.Grammatica.Runtime.ProductionPatternAlternative.Item(System.Int32)" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.RE.CombineElement" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.RE.Element" -->
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Element.Clone">
             Creates a copy of this element. The copy will be an
             instance of the same class matching the same strings.
             Copies of elements are necessary to allow elements to cache
             intermediate results while matching strings without
             interfering with other threads.
            
             @return a copy of this element
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Element.Match(PerCederberg.Grammatica.Runtime.RE.Matcher,PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also
             be specified, but numbers higher than zero (0) cause a
             failed match for any element that doesn't attempt to
             combine other elements.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Element.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CombineElement.elem1">
            The first element.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CombineElement.elem2">
            The second element.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CombineElement.#ctor(PerCederberg.Grammatica.Runtime.RE.Element,PerCederberg.Grammatica.Runtime.RE.Element)">
             Creates a new combine element.
            
             @param first          the first element
             @param second         the second element
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CombineElement.Clone">
             Creates a copy of this element. The copy will be an
             instance of the same class matching the same strings.
             Copies of elements are necessary to allow elements to cache
             intermediate results while matching strings without
             interfering with other threads.
            
             @return a copy of this element
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CombineElement.Match(PerCederberg.Grammatica.Runtime.RE.Matcher,PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also be
             specified, but numbers higher than zero (0) cause a failed
             match for any element that doesn't attempt to combine other
             elements.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the longest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CombineElement.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.Token" -->
        <member name="F:PerCederberg.Grammatica.Runtime.Token.pattern">
            The token pattern used for this token.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Token.image">
            The characters that constitute this token. This is normally
            referred to as the token image.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Token.startLine">
            The line number of the first character in the token image.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Token.startColumn">
            The column number of the first character in the token image.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Token.endLine">
            The line number of the last character in the token image.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Token.endColumn">
            The column number of the last character in the token image.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Token.previous">
            The previous token in the list of tokens.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Token.next">
            The next token in the list of tokens.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Token.#ctor(PerCederberg.Grammatica.Runtime.TokenPattern,System.String,System.Int32,System.Int32)">
             Creates a new token.
            
             @param pattern        the token pattern
             @param image          the token image (i.e. characters)
             @param line           the line number of the first character
             @param col            the column number of the first character
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Token.GetImage">
             Returns the token image. The token image consists of the
             input characters matched to form this token.
            
             @return the token image
            
             @see #Image
            
             @deprecated Use the Image property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Token.GetPreviousToken">
             Returns the previous token. The previous token may be a token
             that has been ignored in the parsing. Note that if the token
             list feature hasn't been used in the tokenizer, this method
             will always return null. By default the token list feature is
             not used.
            
             @return the previous token, or
                     null if no such token is available
            
             @see #Previous
             @see #GetNextToken
             @see Tokenizer#UseTokenList
            
             @since 1.4
            
             @deprecated Use the Previous property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Token.GetNextToken">
             Returns the next token. The next token may be a token that has
             been ignored in the parsing. Note that if the token list
             feature hasn't been used in the tokenizer, this method will
             always return null. By default the token list feature is not
             used.
            
             @return the next token, or
                     null if no such token is available
            
             @see #Next
             @see #GetPreviousToken
             @see Tokenizer#UseTokenList
            
             @since 1.4
            
             @deprecated Use the Next property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Token.ToString">
             Returns a string representation of this token.
            
             @return a string representation of this token
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Token.ToShortString">
             Returns a short string representation of this token. The
             string will only contain the token image and possibly the
             token pattern name.
            
             @return a short string representation of this token
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Token.Id">
             The node type id property (read-only). This value is set as
             a unique identifier for each type of node, in order to
             simplify later identification.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Token.Name">
             The node name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Token.StartLine">
             The line number property of the first character in this
             node (read-only). If the node has child elements, this
             value will be fetched from the first child.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Token.StartColumn">
             The column number property of the first character in this
             node (read-only). If the node has child elements, this
             value will be fetched from the first child.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Token.EndLine">
             The line number property of the last character in this node
             (read-only). If the node has child elements, this value
             will be fetched from the last child.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Token.EndColumn">
             The column number property of the last character in this
             node (read-only). If the node has child elements, this
             value will be fetched from the last child.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Token.Image">
             The token image property (read-only). The token image
             consists of the input characters matched to form this
             token.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Token.Pattern">
            The token pattern property (read-only).
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Token.Previous">
             The previous token property. If the token list feature is
             used in the tokenizer, all tokens found will be chained
             together in a double-linked list. The previous token may be
             a token that was ignored during the parsing, due to it's
             ignore flag being set. If there is no previous token or if
             the token list feature wasn't used in the tokenizer (the
             default), the previous token will always be null.
            
             @see #Next
             @see Tokenizer#UseTokenList
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Token.Next">
             The next token property. If the token list feature is used
             in the tokenizer, all tokens found will be chained together
             in a double-linked list. The next token may be a token that
             was ignored during the parsing, due to it's ignore flag
             being set. If there is no next token or if the token list
             feature wasn't used in the tokenizer (the default), the
             next token will always be null.
            
             @see #Previous
             @see Tokenizer#UseTokenList
            
             @since 1.5
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.RE.StringElement" -->
        <member name="F:PerCederberg.Grammatica.Runtime.RE.StringElement.value">
            The string to match with.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.StringElement.#ctor(System.Char)">
             Creates a new string element.
            
             @param c              the character to match with
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.StringElement.#ctor(System.String)">
             Creates a new string element.
            
             @param str            the string to match with
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.StringElement.GetString">
             Returns the string to be matched.
            
             @return the string to be matched
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.StringElement.Clone">
             Returns this element as it is immutable.
            
             @return this string element
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.StringElement.Match(PerCederberg.Grammatica.Runtime.RE.Matcher,PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also
             be specified, but numbers higher than zero (0) cause a
             failed match for any element that doesn't attempt to
             combine other elements.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the longest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.StringElement.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <member name="T:Ciloci.Flee.FunctionCallElement">
            <summary>
            Represents a function call
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:Ciloci.Flee.FunctionCallElement.Method">
            <summary>
            The method info we will be calling
            </summary>	
        </member>
        <member name="T:Ciloci.Flee.CalcEngine.CircularReferenceException">
            <summary>
        Represents the exception thrown when a circular reference is detected in the calculation engine.
      </summary><remarks>
        This exception will be thrown when Recalculate is called on the CalculationEngine and there is a circular reference present.
      </remarks>	
        </member>
        <member name="T:Ciloci.Flee.CalcEngine.BatchLoadCompileException">
            <summary>
      The exception thrown when an batch loaded expression cannot be compiled.
    </summary><remarks>
      This exception is thrown whenever a batch loaded expression cannot be compiled.  You use the AtomName and ExpressionText properties 
      to get more information about the source of the exception.      
    </remarks>	
        </member>
        <member name="P:Ciloci.Flee.CalcEngine.BatchLoadCompileException.AtomName">
            <summary>
      Gets the name of the expression that could not be compiled.
    </summary><value>The name of the expression</value><remarks>Use this property to determine the name of the expression that caused the exception.</remarks>	
        </member>
        <member name="P:Ciloci.Flee.CalcEngine.BatchLoadCompileException.ExpressionText">
            <summary>
      Gets the text of the expression that could not be compiled.
    </summary><value>The text of the expression</value><remarks>Use this property to determine the text of the expression that caused the exception.</remarks>	
        </member>
        <member name="T:Ciloci.Flee.ImportBase">
            <summary>Base class for all expression imports</summary>
        </member>
        <member name="P:Ciloci.Flee.ImportBase.Name">
            <summary>Gets the name of the import</summary><value>The name of the current import instance</value><remarks>Use this property to get the name of the import</remarks>
        </member>
        <member name="P:Ciloci.Flee.ImportBase.IsContainer">
            <summary>Determines if this import can contain other imports</summary><value>True if this import can contain other imports; False otherwise</value><remarks>Use this property to determine if this import contains other imports</remarks>
        </member>
        <member name="T:Ciloci.Flee.TypeImport">
            <summary>Represents an imported type</summary><remarks>Use this class when you want to make the members of a type available to an expression</remarks>
        </member>
        <member name="M:Ciloci.Flee.TypeImport.#ctor(System.Type)">
            <summary>Creates a new import with a given type</summary><param name="importType">The type to import</param>
        </member>
        <member name="M:Ciloci.Flee.TypeImport.#ctor(System.Type,System.Boolean)">
            <summary>Creates a new import with a given type</summary><param name="importType">The type to import</param><param name="useTypeNameAsNamespace">True to use the type's name as a namespace; False otherwise</param><remarks>When useTypeNameAsNamespace is set to True, the type will act as a namespace in an expression.  For example: If
      you import the DayOfWeek enum and set the flag to true, you can reference it as DayOfWeek.Sunday in an expression.  When the flag is false,
      you would reference it as simply Sunday.</remarks>
        </member>
        <member name="P:Ciloci.Flee.TypeImport.Target">
            <summary>Gets the type that this import represents</summary><value>The type that this import represents</value><remarks>Use this property to retrieve the imported type</remarks>
        </member>
        <member name="T:Ciloci.Flee.MethodImport">
            <summary>Represents an imported method</summary><remarks>Use this class when you want to make a single method available to an expression</remarks>
        </member>
        <member name="M:Ciloci.Flee.MethodImport.#ctor(System.Reflection.MethodInfo)">
            <summary>Creates a new method import with a given method</summary><param name="importMethod">The method to import</param>
        </member>
        <member name="P:Ciloci.Flee.MethodImport.Target">
            <summary>Gets the method that this import represents</summary><value>The method that this import represents</value><remarks>Use this property to retrieve the imported method</remarks>
        </member>
        <member name="T:Ciloci.Flee.NamespaceImport">
            <summary>Represents an imported namespace</summary><remarks>This class acts as a container for other imports.  Use it when you want to logically group expression imports.</remarks>
        </member>
        <member name="M:Ciloci.Flee.NamespaceImport.#ctor(System.String)">
            <summary>Creates a new namespace import with a given namespace name</summary><param name="importNamespace">The name of the namespace to import</param>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.ParserCreationException" -->
        <member name="F:PerCederberg.Grammatica.Runtime.ParserCreationException.type">
            The error type.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParserCreationException.name">
            The token or production pattern name. This variable is only
            set for some error types.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParserCreationException.info">
            The additional error information string. This variable is only
            set for some error types.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParserCreationException.details">
            The error details list. This variable is only set for some
            error types.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParserCreationException.#ctor(PerCederberg.Grammatica.Runtime.ParserCreationException.ErrorType,System.String)">
             Creates a new parser creation exception.
            
             @param type           the parse error type
             @param info           the additional error information
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParserCreationException.#ctor(PerCederberg.Grammatica.Runtime.ParserCreationException.ErrorType,System.String,System.String)">
             Creates a new parser creation exception.
            
             @param type           the parse error type
             @param name           the token or production pattern name
             @param info           the additional error information
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParserCreationException.#ctor(PerCederberg.Grammatica.Runtime.ParserCreationException.ErrorType,System.String,System.String,System.Collections.ArrayList)">
             Creates a new parser creation exception.
            
             @param type           the parse error type
             @param name           the token or production pattern name
             @param info           the additional error information
             @param details        the error details list
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParserCreationException.GetErrorType">
             Returns the error type.
            
             @return the error type
            
             @see #Type
            
             @deprecated Use the Type property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParserCreationException.GetName">
             Returns the token or production name.
            
             @return the token or production name
            
             @see #Name
            
             @deprecated Use the Name property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParserCreationException.GetInfo">
             Returns the additional error information.
            
             @return the additional error information
            
             @see #Info
            
             @deprecated Use the Info property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParserCreationException.GetDetails">
             Returns the detailed error information as a string
            
             @return the detailed error information
            
             @see #Details
            
             @deprecated Use the Details property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParserCreationException.GetMessage">
             Returns the error message. This message will contain all the
             information available.
            
             @return the error message
            
             @see #Message
            
             @deprecated Use the Message property instead.
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParserCreationException.Type">
             The error type property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParserCreationException.Name">
             The token or production name property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParserCreationException.Info">
             The additional error information property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParserCreationException.Details">
             The detailed error information property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParserCreationException.Message">
            The message property (read-only). This property contains
            the detailed exception error message.
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.ParserCreationException.ErrorType">
            The error type enumeration.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParserCreationException.ErrorType.INTERNAL">
            The internal error type is only used to signal an
            error that is a result of a bug in the parser or
            tokenizer code.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParserCreationException.ErrorType.INVALID_PARSER">
            The invalid parser error type is used when the parser
            as such is invalid. This error is typically caused by
            using a parser without any patterns.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParserCreationException.ErrorType.INVALID_TOKEN">
            The invalid token error type is used when a token
            pattern is erroneous. This error is typically caused
            by an invalid pattern type or an erroneous regular
            expression.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParserCreationException.ErrorType.INVALID_PRODUCTION">
            The invalid production error type is used when a
            production pattern is erroneous. This error is
            typically caused by referencing undeclared productions,
            or violating some other production pattern constraint.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParserCreationException.ErrorType.INFINITE_LOOP">
            The infinite loop error type is used when an infinite
            loop has been detected in the grammar. One of the
            productions in the loop will be reported.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParserCreationException.ErrorType.INHERENT_AMBIGUITY">
            The inherent ambiguity error type is used when the set
            of production patterns (i.e. the grammar) contains
            ambiguities that cannot be resolved.
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.RE.RepeatElement" -->
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RepeatElement.elem">
            The element to repeat.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RepeatElement.min">
            The minimum number of repetitions.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RepeatElement.max">
            The maximum number of repetitions.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RepeatElement.type">
            The repeat type.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RepeatElement.matchStart">
            The start position of the last set of matches.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RepeatElement.matches">
            A set with all matches starting at matchStart. A match with
            a specific length is reported by a non-zero bit in the bit
            array.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RepeatElement.#ctor(PerCederberg.Grammatica.Runtime.RE.Element,System.Int32,System.Int32,PerCederberg.Grammatica.Runtime.RE.RepeatElement.RepeatType)">
             Creats a new element repeater.
            
             @param elem           the element to repeat
             @param min            the minimum count
             @param max            the maximum count
             @param type           the repeat type constant
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RepeatElement.Clone">
             Creates a copy of this element. The copy will be an
             instance of the same class matching the same strings.
             Copies of elements are necessary to allow elements to cache
             intermediate results while matching strings without
             interfering with other threads.
            
             @return a copy of this element
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RepeatElement.Match(PerCederberg.Grammatica.Runtime.RE.Matcher,PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also be
             specified.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RepeatElement.MatchGreedy(PerCederberg.Grammatica.Runtime.RE.Matcher,PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of the longest possible matching string
             starting at the specified position. The number of matches
             to skip can also be specified.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the longest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RepeatElement.MatchReluctant(PerCederberg.Grammatica.Runtime.RE.Matcher,PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of the shortest possible matching string
             starting at the specified position. The number of matches to
             skip can also be specified.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the shortest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RepeatElement.MatchPossessive(PerCederberg.Grammatica.Runtime.RE.Matcher,PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of the maximum number of elements matching
             the string starting at the specified position. This method
             allows no backtracking, i.e. no skips..
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param count          the start count, normally zero (0)
            
             @return the length of the longest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RepeatElement.FindMatches(PerCederberg.Grammatica.Runtime.RE.Matcher,PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Int32,System.Int32,System.Int32,System.Int32)">
             Finds all matches and adds the lengths to the matches set.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param length         the match length at the start position
             @param count          the number of sub-elements matched
             @param attempt        the number of match attempts here
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RepeatElement.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.RE.RepeatElement.RepeatType">
            The repeat type constants.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RepeatElement.RepeatType.GREEDY">
            The greedy repeat type constant.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RepeatElement.RepeatType.RELUCTANT">
            The reluctant repeat type constant.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RepeatElement.RepeatType.POSSESSIVE">
            The possesive repeat type constant.
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.RE.Matcher" -->
        <member name="F:PerCederberg.Grammatica.Runtime.RE.Matcher.element">
            The base regular expression element.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.Matcher.buffer">
            The input character buffer to work with.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.Matcher.ignoreCase">
            The character case ignore flag.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.Matcher.start">
            The start of the latest match found.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.Matcher.length">
            The length of the latest match found.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.Matcher.endOfString">
            The end of string reached flag. This flag is set if the end
            of the string was encountered during the latest match.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.#ctor(PerCederberg.Grammatica.Runtime.RE.Element,PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Boolean)">
             Creates a new matcher with the specified element.
            
             @param e              the base regular expression element
             @param buffer         the input character buffer to work with
             @param ignoreCase     the character case ignore flag
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.IsCaseInsensitive">
             Checks if this matcher compares in case-insensitive mode.
            
             @return true if the matching is case-insensitive, or
                     false otherwise
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.Reset">
            Resets the information about the last match. This will
            clear all flags and set the match length to a negative
            value. This method is automatically called before starting
            a new match.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.Reset(System.String)">
             Resets the matcher for use with a new input string. This
             will clear all flags and set the match length to a negative
             value.
            
             @param str            the new string to work with
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.Reset(PerCederberg.Grammatica.Runtime.ReaderBuffer)">
             Resets the matcher for use with a new look-ahead character
             input stream. This will clear all flags and set the match
             length to a negative value.
            
             @param buffer          the character input buffer
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.Start">
             Returns the start position of the latest match. If no match
             has been encountered, this method returns zero (0).
            
             @return the start position of the latest match
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.End">
             Returns the end position of the latest match. This is one
             character after the match end, i.e. the first character
             after the match. If no match has been encountered, this
             method returns the same value as start().
            
             @return the end position of the latest match
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.Length">
             Returns the length of the latest match.
            
             @return the length of the latest match, or
                     -1 if no match was found
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.HasReadEndOfString">
             Checks if the end of the string was encountered during the
             last match attempt. This flag signals that more input may
             be needed in order to get a match (or a longer match).
            
             @return true if the end of string was encountered, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.MatchFromBeginning">
             Attempts to find a match starting at the beginning of the
             string.
            
             @return true if a match was found, or
                     false otherwise
            
             @throws IOException if an I/O error occurred while reading
                         an input stream
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.MatchFrom(System.Int32)">
             Attempts to find a match starting at the specified position
             in the string.
            
             @param pos            the starting position of the match
            
             @return true if a match was found, or
                     false otherwise
            
             @throws IOException if an I/O error occurred while reading
                         an input stream
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.ToString">
             Returns the latest matched string. If no string has been
             matched, an empty string will be returned.
            
             @return the latest matched string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.Matcher.SetReadEndOfString">
            Sets the end of string encountered flag. This method is
            called by the various elements analyzing the string.
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.RE.AlternativeElement" -->
        <member name="F:PerCederberg.Grammatica.Runtime.RE.AlternativeElement.elem1">
            The first alternative element.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.AlternativeElement.elem2">
            The second alternative element.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.AlternativeElement.#ctor(PerCederberg.Grammatica.Runtime.RE.Element,PerCederberg.Grammatica.Runtime.RE.Element)">
             Creates a new alternative element.
            
             @param first          the first alternative
             @param second         the second alternative
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.AlternativeElement.Clone">
             Creates a copy of this element. The copy will be an
             instance of the same class matching the same strings.
             Copies of elements are necessary to allow elements to cache
             intermediate results while matching strings without
             interfering with other threads.
            
             @return a copy of this element
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.AlternativeElement.Match(PerCederberg.Grammatica.Runtime.RE.Matcher,PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also
             be specified, but numbers higher than zero (0) cause a
             failed match for any element that doesn't attempt to
             combine other elements.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the longest matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.AlternativeElement.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <member name="T:ExpressionConstants">
            <remarks>An enumeration with token and production node
            constants.</remarks>
        </member>
        <member name="T:ExpressionAnalyzer">
            <remarks>A class providing callback methods for the
            parser.</remarks>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.Analyzer" -->
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.#ctor">
            Creates a new parse tree analyzer.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.Reset">
             Resets this analyzer when the parser is reset for another
             input stream. The default implementation of this method does
             nothing.
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.Analyze(PerCederberg.Grammatica.Runtime.Node)">
             Analyzes a parse tree node by traversing all it's child nodes.
             The tree traversal is depth-first, and the appropriate
             callback methods will be called. If the node is a production
             node, a new production node will be created and children will
             be added by recursively processing the children of the
             specified production node. This method is used to process a
             parse tree after creation.
            
             @param node           the parse tree node to process
            
             @return the resulting parse tree node
            
             @throws ParserLogException if the node analysis discovered
                         errors
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.Analyze(PerCederberg.Grammatica.Runtime.Node,PerCederberg.Grammatica.Runtime.ParserLogException)">
             Analyzes a parse tree node by traversing all it's child nodes.
             The tree traversal is depth-first, and the appropriate
             callback methods will be called. If the node is a production
             node, a new production node will be created and children will
             be added by recursively processing the children of the
             specified production node. This method is used to process a
             parse tree after creation.
            
             @param node           the parse tree node to process
             @param log            the parser error log
            
             @return the resulting parse tree node
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.NewProduction(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Factory method to create a new production node. This method
             can be overridden to provide other production implementations
             than the default one.
            
             @param pattern        the production pattern
            
             @return the new production node
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.Enter(PerCederberg.Grammatica.Runtime.Node)">
             Called when entering a parse tree node. By default this method
             does nothing. A subclass can override this method to handle
             each node separately.
            
             @param node           the node being entered
            
             @throws ParseException if the node analysis discovered errors
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.Exit(PerCederberg.Grammatica.Runtime.Node)">
             Called when exiting a parse tree node. By default this method
             returns the node. A subclass can override this method to handle
             each node separately. If no parse tree should be created, this
             method should return null.
            
             @param node           the node being exited
            
             @return the node to add to the parse tree, or
                     null if no parse tree should be created
            
             @throws ParseException if the node analysis discovered errors
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.Child(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             Called when adding a child to a parse tree node. By default
             this method adds the child to the production node. A subclass
             can override this method to handle each node separately. Note
             that the child node may be null if the corresponding exit()
             method returned null.
            
             @param node           the parent node
             @param child          the child node, or null
            
             @throws ParseException if the node analysis discovered errors
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.GetChildAt(PerCederberg.Grammatica.Runtime.Node,System.Int32)">
             Returns a child at the specified position. If either the node
             or the child node is null, this method will throw a parse
             exception with the internal error type.
            
             @param node           the parent node
             @param pos            the child position
            
             @return the child node
            
             @throws ParseException if either the node or the child node
                         was null
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.GetChildWithId(PerCederberg.Grammatica.Runtime.Node,System.Int32)">
             Returns the first child with the specified id. If the node is
             null, or no child with the specified id could be found, this
             method will throw a parse exception with the internal error
             type.
            
             @param node           the parent node
             @param id             the child node id
            
             @return the child node
            
             @throws ParseException if the node was null, or a child node
                         couldn't be found
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.GetValue(PerCederberg.Grammatica.Runtime.Node,System.Int32)">
             Returns the node value at the specified position. If either
             the node or the value is null, this method will throw a parse
             exception with the internal error type.
            
             @param node           the parse tree node
             @param pos            the child position
            
             @return the value object
            
             @throws ParseException if either the node or the value was null
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.GetIntValue(PerCederberg.Grammatica.Runtime.Node,System.Int32)">
             Returns the node integer value at the specified position. If
             either the node is null, or the value is not an instance of
             the Integer class, this method will throw a parse exception
             with the internal error type.
            
             @param node           the parse tree node
             @param pos            the child position
            
             @return the value object
            
             @throws ParseException if either the node was null, or the
                         value wasn't an integer
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.GetStringValue(PerCederberg.Grammatica.Runtime.Node,System.Int32)">
             Returns the node string value at the specified position. If
             either the node is null, or the value is not an instance of
             the String class, this method will throw a parse exception
             with the internal error type.
            
             @param node           the parse tree node
             @param pos            the child position
            
             @return the value object
            
             @throws ParseException if either the node was null, or the
                         value wasn't a string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Analyzer.GetChildValues(PerCederberg.Grammatica.Runtime.Node)">
             Returns all the node values for all child nodes.
            
             @param node           the parse tree node
            
             @return a list with all the child node values
            
             @since 1.3
        </member>
        <member name="M:ExpressionAnalyzer.Enter(PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.Exit(PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.Child(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterAdd(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitAdd(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterSub(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitSub(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterMul(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitMul(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterDiv(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitDiv(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterPower(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitPower(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterMod(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitMod(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterLeftParen(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitLeftParen(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterRightParen(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitRightParen(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterLeftBrace(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitLeftBrace(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterRightBrace(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitRightBrace(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterEq(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitEq(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterLt(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitLt(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterGt(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitGt(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterLte(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitLte(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterGte(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitGte(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterNe(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitNe(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterAnd(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitAnd(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterOr(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitOr(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterXor(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitXor(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterNot(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitNot(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterIn(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitIn(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterDot(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitDot(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterArgumentSeparator(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitArgumentSeparator(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterArrayBraces(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitArrayBraces(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterLeftShift(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitLeftShift(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterRightShift(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitRightShift(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterInteger(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitInteger(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterReal(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitReal(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterStringLiteral(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitStringLiteral(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterCharLiteral(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitCharLiteral(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterTrue(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitTrue(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterFalse(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitFalse(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterIdentifier(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitIdentifier(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterHexLiteral(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitHexLiteral(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterNullLiteral(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitNullLiteral(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterTimespan(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitTimespan(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterDatetime(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitDatetime(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterIf(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitIf(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterCast(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitCast(PerCederberg.Grammatica.Runtime.Token)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterXorExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitXorExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildXorExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterOrExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitOrExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildOrExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterAndExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitAndExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildAndExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterNotExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitNotExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildNotExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterInExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitInExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildInExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterInTargetExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitInTargetExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildInTargetExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterInListTargetExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitInListTargetExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildInListTargetExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterCompareExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitCompareExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildCompareExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterShiftExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitShiftExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildShiftExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterAdditiveExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitAdditiveExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildAdditiveExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterMultiplicativeExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitMultiplicativeExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildMultiplicativeExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterPowerExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitPowerExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildPowerExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterNegateExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitNegateExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildNegateExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterMemberExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitMemberExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildMemberExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterMemberAccessExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitMemberAccessExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildMemberAccessExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterBasicExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitBasicExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildBasicExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterMemberFunctionExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitMemberFunctionExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildMemberFunctionExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterFieldPropertyExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitFieldPropertyExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildFieldPropertyExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterSpecialFunctionExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitSpecialFunctionExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildSpecialFunctionExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterIfExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitIfExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildIfExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterCastExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitCastExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildCastExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterCastTypeExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitCastTypeExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildCastTypeExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterIndexExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitIndexExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildIndexExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterFunctionCallExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitFunctionCallExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildFunctionCallExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterArgumentList(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitArgumentList(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildArgumentList(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterLiteralExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitLiteralExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildLiteralExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterBooleanLiteralExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitBooleanLiteralExpression(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildBooleanLiteralExpression(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.EnterExpressionGroup(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when entering a parse tree node.</summary>
            
             <param name="node">the node being entered</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ExitExpressionGroup(PerCederberg.Grammatica.Runtime.Production)">
             <summary>Called when exiting a parse tree node.</summary>
            
             <param name="node">the node being exited</param>
            
             <returns>the node to add to the parse tree, or
                      null if no parse tree should be created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <member name="M:ExpressionAnalyzer.ChildExpressionGroup(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             <summary>Called when adding a child to a parse tree
             node.</summary>
            
             <param name="node">the parent node</param>
             <param name="child">the child node, or null</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParseException">if the node analysis
             discovered errors</exception>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.TokenRegExpParser" -->
        <member name="F:PerCederberg.Grammatica.Runtime.TokenRegExpParser.pattern">
            The regular expression pattern.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ignoreCase">
            The character case ignore flag.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenRegExpParser.pos">
            The current position in the pattern. This variable is used by
            the parsing methods.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenRegExpParser.start">
            The start NFA state for this regular expression.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenRegExpParser.end">
            The end NFA state for this regular expression.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenRegExpParser.stateCount">
            The number of states found.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenRegExpParser.transitionCount">
            The number of transitions found.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenRegExpParser.epsilonCount">
            The number of epsilon transitions found.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.#ctor(System.String)">
             Creates a new case-sensitive regular expression parser. Note
             that this will trigger the parsing of the regular expression.
            
             @param pattern        the regular expression pattern
            
             @throws RegExpException if the regular expression couldn't be
                         parsed correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.#ctor(System.String,System.Boolean)">
             Creates a new regular expression parser. The regular
             expression can be either case-sensitive or case-insensitive.
             Note that this will trigger the parsing of the regular
             expression.
            
             @param pattern        the regular expression pattern
             @param ignoreCase     the character case ignore flag
            
             @throws RegExpException if the regular expression couldn't be
                         parsed correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.GetDebugInfo">
             Returns the debug information for the generated NFA.
            
             @return the debug information for the generated NFA
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.UpdateStats(PerCederberg.Grammatica.Runtime.NFAState,System.Collections.Hashtable)">
             Updates the statistical counters for the NFA generated.
            
             @param state          the current state to visit
             @param visited        the lookup map of visited states
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ParseExpr(PerCederberg.Grammatica.Runtime.NFAState)">
             Parses a regular expression. This method handles the Expr
             production in the grammar (see regexp.grammar).
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ParseTerm(PerCederberg.Grammatica.Runtime.NFAState)">
             Parses a regular expression term. This method handles the
             Term production in the grammar (see regexp.grammar).
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ParseFact(PerCederberg.Grammatica.Runtime.NFAState)">
             Parses a regular expression factor. This method handles the
             Fact production in the grammar (see regexp.grammar).
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ParseAtom(PerCederberg.Grammatica.Runtime.NFAState)">
             Parses a regular expression atom. This method handles the
             Atom production in the grammar (see regexp.grammar).
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ParseAtomModifier(PerCederberg.Grammatica.Runtime.NFAState,PerCederberg.Grammatica.Runtime.NFAState)">
             Parses a regular expression atom modifier. This method handles
             the AtomModifier production in the grammar (see regexp.grammar).
            
             @param start          the initial NFA state
             @param end            the terminal NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ParseCharSet(PerCederberg.Grammatica.Runtime.NFAState)">
             Parses a regular expression character set. This method handles
             the contents of the '[...]' construct in a regular expression.
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ParseChar(PerCederberg.Grammatica.Runtime.NFAState)">
             Parses a regular expression character. This method handles
             a single normal character in a regular expression.
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ParseEscapeChar(PerCederberg.Grammatica.Runtime.NFAState)">
             Parses a regular expression character escape. This method
             handles a single character escape in a regular expression.
            
             @param start          the initial NFA state
            
             @return the terminating NFA state
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ReadEscapeChar">
             Reads a regular expression character escape. This method
             handles a single character escape in a regular expression.
            
             @return the character read
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ReadNumber">
             Reads a number from the pattern. If the next character isn't a
             numeric character, an exception is thrown. This method reads
             several consecutive numeric characters.
            
             @return the numeric value read
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ReadChar">
             Reads the next character in the pattern. If no next character
             exists, an exception is thrown.
            
             @return the character read
            
             @throws RegExpException if no next character was available in
                         the pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.ReadChar(System.Char)">
             Reads the next character in the pattern. If the character
             wasn't the specified one, an exception is thrown.
            
             @param c              the character to read
            
             @return the character read
            
             @throws RegExpException if the character read didn't match the
                         specified one, or if no next character was
                         available in the pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenRegExpParser.PeekChar(System.Int32)">
             Returns a character that has not yet been read from the
             pattern. If the requested position is beyond the end of the
             pattern string, -1 is returned.
            
             @param count          the preview position, from zero (0)
            
             @return the character found, or
                     -1 if beyond the end of the pattern string
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.TokenNFA" -->
        <member name="F:PerCederberg.Grammatica.Runtime.TokenNFA.initialChar">
            The initial state lookup table, indexed by the first ASCII
            character. This array is used to for speed optimizing the
            first step in the match, since the initial state would
            otherwise have a long list of transitions to consider.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenNFA.initial">
            The initial state. This state contains any transitions not
            already stored in the initial text state array, i.e. non-ASCII
            or complex transitions (such as regular expressions).
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenNFA.queue">
            The NFA state queue to use.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenNFA.AddTextMatch(System.String,System.Boolean,PerCederberg.Grammatica.Runtime.TokenPattern)">
             Adds a string match to this automaton. New states and
             transitions will be added to extend this automaton to support
             the specified string.
            
             @param str            the string to match
             @param ignoreCase     the case-insensitive match flag
             @param value          the match value
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenNFA.AddRegExpMatch(System.String,System.Boolean,PerCederberg.Grammatica.Runtime.TokenPattern)">
             Adds a regular expression match to this automaton. New states
             and transitions will be added to extend this automaton to
             support the specified string. Note that this method only
             supports a subset of the full regular expression syntax, so
             a more complete regular expression library must also be
             provided.
            
             @param pattern        the regular expression string
             @param ignoreCase     the case-insensitive match flag
             @param value          the match value
            
             @throws RegExpException if the regular expression parsing
                         failed
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenNFA.Match(PerCederberg.Grammatica.Runtime.ReaderBuffer,PerCederberg.Grammatica.Runtime.TokenMatch)">
             Checks if this NFA matches the specified input text. The
             matching will be performed from position zero (0) in the
             buffer. This method will not read any characters from the
             stream, just peek ahead.
            
             @param buffer         the input buffer to check
             @param match          the token match to update
            
             @return the number of characters matched, or
                     zero (0) if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFAState">
            An NFA state. The NFA consists of a series of states, each
            having zero or more transitions to other states.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFAState.value">
            The optional state value (if it is a final state).
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFAState.incoming">
            The incoming transitions to this state.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFAState.outgoing">
            The outgoing transitions from this state.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFAState.epsilonOut">
            The outgoing epsilon transitions flag.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAState.HasTransitions">
             Checks if this state has any incoming or outgoing
             transitions.
            
             @return true if this state has transitions, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAState.IsAsciiOutgoing">
             Checks if all outgoing transitions only match ASCII
             characters.
            
             @return true if all transitions are ASCII-only, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAState.AddIn(PerCederberg.Grammatica.Runtime.NFATransition)">
             Adds a new incoming transition.
            
             @param trans          the transition to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAState.AddOut(System.Char,System.Boolean,PerCederberg.Grammatica.Runtime.NFAState)">
             Adds a new outgoing character transition. If the target
             state specified was null and an identical transition
             already exists, it will be reused and its target returned.
            
             @param ch             he character to match
             @param ignoreCase     the case-insensitive flag
             @param state          the target state, or null
            
             @return the transition target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAState.AddOut(PerCederberg.Grammatica.Runtime.NFATransition)">
             Adds a new outgoing transition.
            
             @param trans          the transition to add
            
             @return the transition target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAState.MergeInto(PerCederberg.Grammatica.Runtime.NFAState)">
             Merges all the transitions in this state into another
             state.
            
             @param state      the state to merge into
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAState.FindUniqueCharTransition(System.Char)">
             Finds a unique character transition if one exists. The
             transition must be the only matching single character
             transition and no other transitions may reach the same
             state.
            
             @param ch             the character to search for
            
             @return the unique transition state found, or
                     null if not found
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAState.MatchTransitions(System.Char,PerCederberg.Grammatica.Runtime.NFAStateQueue,System.Boolean)">
             Attempts a match on each of the transitions leading from
             this state. If a match is found, its state will be added
             to the queue. If the initial match flag is set, epsilon
             transitions will also be matched (and their targets called
             recursively).
            
             @param ch         the character to match
             @param queue      the state queue
             @param initial    the initial match flag
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAState.MatchEmpty(PerCederberg.Grammatica.Runtime.NFAStateQueue)">
             Adds all the epsilon transition targets to the specified
             queue.
            
             @param queue      the state queue
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFATransition">
            An NFA state transition. A transition checks a single
            character of input an determines if it is a match. If a match
            is encountered, the NFA should move forward to the transition
            state.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFATransition.state">
            The target state of the transition.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFATransition.#ctor(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a new state transition.
            
             @param state          the target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFATransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFATransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFATransition.Copy(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFAEpsilonTransition">
            The special epsilon transition. This transition matches the
            empty input, i.e. it is an automatic transition that doesn't
            read any input. As such, it returns false in the match method
            and is handled specially everywhere.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAEpsilonTransition.#ctor(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a new epsilon transition.
            
             @param state          the target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAEpsilonTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAEpsilonTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAEpsilonTransition.Copy(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFACharTransition">
            A single character match transition.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFACharTransition.match">
            The character to match.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharTransition.#ctor(System.Char,PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a new character transition.
            
             @param match          the character to match
             @param state          the target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharTransition.Copy(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFACharRangeTransition">
            A character range match transition. Used for user-defined
            character sets in regular expressions.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.inverse">
            The inverse match flag.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.ignoreCase">
            The case-insensitive match flag.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.contents">
            The character set content. This array may contain either
            range objects or Character objects.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.#ctor(System.Boolean,System.Boolean,PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a new character range transition.
            
             @param inverse        the inverse match flag
             @param ignoreCase     the case-insensitive match flag
             @param state          the target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.AddCharacter(System.Char)">
             Adds a single character to this character set.
            
             @param c              the character to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.AddRange(System.Char,System.Char)">
             Adds a character range to this character set.
            
             @param min            the minimum character value
             @param max            the maximum character value
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.AddContent(System.Object)">
             Adds an object to the character set content array.
            
             @param obj            the object to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.Copy(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.Range">
            A character range class.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.Range.min">
            The minimum character value.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.Range.max">
            The maximum character value.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.Range.#ctor(System.Char,System.Char)">
             Creates a new character range.
            
             @param min        the minimum character value
             @param max        the maximum character value
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.Range.IsAscii">
             Checks if this range only matches ASCII characters
            
             @return true if this range only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFACharRangeTransition.Range.Inside(System.Char)">
             Checks if the specified character is inside the range.
            
             @param c          the character to check
            
             @return true if the character is in the range, or
                     false otherwise
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFADotTransition">
            The dot ('.') character set transition. This transition
            matches a single character that is not equal to a newline
            character.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFADotTransition.#ctor(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a new dot character set transition.
            
             @param state          the target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFADotTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFADotTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFADotTransition.Copy(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFADigitTransition">
            The digit character set transition. This transition matches a
            single numeric character.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFADigitTransition.#ctor(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a new digit character set transition.
            
             @param state          the target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFADigitTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFADigitTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFADigitTransition.Copy(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFANonDigitTransition">
            The non-digit character set transition. This transition
            matches a single non-numeric character.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonDigitTransition.#ctor(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a new non-digit character set transition.
            
             @param state          the target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonDigitTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonDigitTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonDigitTransition.Copy(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFAWhitespaceTransition">
            The whitespace character set transition. This transition
            matches a single whitespace character.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAWhitespaceTransition.#ctor(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a new whitespace character set transition.
            
             @param state          the target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAWhitespaceTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAWhitespaceTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAWhitespaceTransition.Copy(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFANonWhitespaceTransition">
            The non-whitespace character set transition. This transition
            matches a single non-whitespace character.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonWhitespaceTransition.#ctor(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a new non-whitespace character set transition.
            
             @param state          the target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonWhitespaceTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonWhitespaceTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonWhitespaceTransition.Copy(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFAWordTransition">
            The word character set transition. This transition matches a
            single word character.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAWordTransition.#ctor(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a new word character set transition.
            
             @param state          the target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAWordTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAWordTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAWordTransition.Copy(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.NFANonWordTransition">
            The non-word character set transition. This transition matches
            a single non-word character.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonWordTransition.#ctor(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a new non-word character set transition.
            
             @param state          the target state
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonWordTransition.IsAscii">
             Checks if this transition only matches ASCII characters.
             I.e. characters with numeric values between 0 and 127.
            
             @return true if this transition only matches ASCII, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonWordTransition.Match(System.Char)">
             Checks if the specified character matches the transition.
            
             @param ch             the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFANonWordTransition.Copy(PerCederberg.Grammatica.Runtime.NFAState)">
             Creates a copy of this transition but with another target
             state.
            
             @param state          the new target state
            
             @return an identical copy of this transition
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.NFAStateQueue" -->
        <member name="F:PerCederberg.Grammatica.Runtime.NFAStateQueue.queue">
            The state queue array. Will be enlarged as needed.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFAStateQueue.first">
            The position of the first entry in the queue (inclusive).
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFAStateQueue.last">
            The position just after the last entry in the queue
            (exclusive).
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.NFAStateQueue.mark">
            The current queue mark position.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAStateQueue.Clear">
            Clears this queue. This operation is fast, as it just
            resets the queue position indices.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAStateQueue.MarkEnd">
            Marks the end of the queue. This means that the next entry
            added to the queue will be marked (when it becomes the
            first in the queue). This operation is fast.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAStateQueue.RemoveFirst">
             Removes and returns the first entry in the queue. This
             operation is fast, since it will only update the index of
             the first entry in the queue.
            
             @return the previous first entry in the queue
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.NFAStateQueue.AddLast(PerCederberg.Grammatica.Runtime.NFAState)">
             Adds a new entry at the end of the queue. This operation
             is mostly fast, unless all the allocated queue space has
             already been used.
            
             @param state          the state to add
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.NFAStateQueue.Empty">
            The empty queue property (read-only).
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.NFAStateQueue.Marked">
            The marked first entry property (read-only). This is set
            to true if the first entry in the queue has been marked.
        </member>
        <member name="T:Ciloci.Flee.VariableCollection">
            <summary>
        Manages the variables available to an expression
      </summary><remarks>
        Use this class to manage the variables that an expression can use
      </remarks>
            Class that manages an expression's variables
        </member>
        <member name="M:Ciloci.Flee.VariableCollection.CreateVariable(System.Type,System.Object)">
            <summary>
            Create a variable
            </summary>
            <param name="variableValueType">The variable's type</param>
            <param name="variableValue">The actual value; may be null</param>
            <returns>A new variable for the value</returns>
            <remarks></remarks>
        </member>
        <member name="M:Ciloci.Flee.VariableCollection.GetVariableType(System.String)">
            <summary>
        Gets the type of a variable.
      </summary><param name="name">The name of the variable</param><returns>The type of the variable's value</returns><remarks>Use this method to get the type of the value of a variable.</remarks>
        </member>
        <member name="M:Ciloci.Flee.VariableCollection.DefineVariable(System.String,System.Type)">
            <summary>
        Defines a variable with a specific type.
      </summary><param name="name">The name of the variable</param><param name="variableType">The type of the new variable</param><remarks>Use this method when you want to add a variable with a type that is different than what would be inferred from defining it using the indexer.</remarks>
        </member>
        <member name="M:Ciloci.Flee.VariableCollection.GetVariableValueInternal``1(System.String)">
            <summary>Gets the value of a variable</summary><typeparam name="T">The type of the variable's value</typeparam><param name="name">The name of the variable</param><returns>The variable's value</returns><remarks>This method is used by the expression to retrieve the values of variables during evaluation.  It must be public so that all expressions
      can access it.  It is meant for internal use and you shouldn't depend on any of its functionality.</remarks>
        </member>
        <member name="M:Ciloci.Flee.VariableCollection.GetVirtualPropertyValueInternal``1(System.String,System.Object)">
            <summary>Gets the result of a virtual property</summary><typeparam name="T">The type of the result's value</typeparam><param name="name">The name of the property</param><returns>The property's value</returns><remarks>
        This method is used by the expression to retrieve the values of virtual properties during evaluation.  It must be public so that all expressions
        can access it.  It is meant for internal use and you shouldn't depend on any of its functionality.
      </remarks>
        </member>
        <member name="M:Ciloci.Flee.VariableCollection.GetFunctionResultInternal``1(System.String,System.Object[])">
            <summary>Gets the result of an on-demand function</summary><typeparam name="T">The type of the result's value</typeparam><param name="name">The name of the function</param><returns>The function's result</returns><remarks>
        This method is used by the expression to retrieve the values of on-demand functions during evaluation.  It must be public so that all expressions
        can access it.  It is meant for internal use and you shouldn't depend on any of its functionality.
      </remarks>
        </member>
        <member name="M:Ciloci.Flee.VariableCollection.Clear">
            <summary>Removes all variables from the collection.</summary><remarks>Use this method to remove all variables from the collection</remarks>
        </member>
        <member name="M:Ciloci.Flee.VariableCollection.Add(System.String,System.Object)">
            <summary>Adds a variable to the collection.</summary><param name="name">The name of the variable</param><param name="value">The value of the variable</param><remarks>Use this method to add a variable to the collection</remarks>
        </member>
        <member name="M:Ciloci.Flee.VariableCollection.ContainsKey(System.String)">
            <summary>Determines if the collection contains a variable.</summary><param name="name">The name of the variable</param><returns>True if the collection has a variable with the given name; False otherwise</returns><remarks>Use this method to determine if the collection contains a variable</remarks>
        </member>
        <member name="M:Ciloci.Flee.VariableCollection.Remove(System.String)">
            <summary>Removes a variable from the collection.</summary><param name="name">The name of the variable</param><remarks>Use this method to remove a variable from the collection</remarks>
        </member>
        <member name="M:Ciloci.Flee.VariableCollection.TryGetValue(System.String,System.Object@)">
            <summary>Gets the value of a variable in the collection.</summary><param name="name">The name of the variable</param><param name="value">The location to store the value of the variable</param><returns>True if the collection contains a variable with the given name; False otherwise</returns><remarks>Use this method to get the value of a variable in the collection</remarks>
        </member>
        <member name="E:Ciloci.Flee.VariableCollection.ResolveVariableType">
            <summary>
        Occurs when an expression needs the type of a variable.
      </summary><remarks>This event is raised when an expression references a variable that doesn't exist in its variable collection.  You can handle this event to provide on-demand variables.</remarks>
        </member>
        <member name="E:Ciloci.Flee.VariableCollection.ResolveVariableValue">
            <summary>
        Occurs when an expression needs the value of a variable.
      </summary><remarks>This event is raised when an expression references a variable that doesn't exist in its variable collection.  You can handle this event to provide on-demand variables.</remarks>
        </member>
        <member name="E:Ciloci.Flee.VariableCollection.ResolveFunction">
            <summary>
        Occurs when an expression needs the return type of a function.
      </summary><remarks>
        This event is raised when an expression references a function that doesn't exist on the expression owner or imports.  By handling this event and providing a value for the <see cref="P:Ciloci.Flee.ResolveFunctionEventArgs.ReturnType"/> property, you can implement an on-demand function.
      </remarks>
        </member>
        <member name="E:Ciloci.Flee.VariableCollection.InvokeFunction">
            <summary>
        Occurs when an expression needs the return value of a function.
      </summary><remarks>
        This event is raised when an expression needs the return value of an on-demand function.  By handling this event and providing a value for the <see cref="P:Ciloci.Flee.InvokeFunctionEventArgs.Result"/> property, you can invoke your on-demand function.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.VariableCollection.Count">
            <summary>Gets the number of variables defined in the collection.</summary><returns>The number of variables in the collection</returns><remarks>Use this method to get a count of the number of variables in the collection</remarks>
        </member>
        <member name="P:Ciloci.Flee.VariableCollection.Item(System.String)">
            <summary>Gets or sets the value of a variable.</summary><param name="name">The name of the variable</param><returns>The value of the variable</returns><remarks>
        Use this method to get or set the value of a variable.  If a variable with the given name does not exist, a new variable will be defined.  Otherwise, the
        value of the existing variable will be overwritten.
      </remarks><exception cref="T:System.ArgumentException">The type of the new value is not compatible with the type of the existing variable</exception>
        </member>
        <member name="P:Ciloci.Flee.VariableCollection.Keys">
            <summary>Gets a collection with the names of all variables.</summary><returns>A collection with all the names</returns><remarks>Use this method to access all the variable names in the collection</remarks>
        </member>
        <member name="P:Ciloci.Flee.VariableCollection.Values">
            <summary>Gets a collection with the values of all variables.</summary><returns>A collection with all the values</returns><remarks>Use this method to access all the variable values in the collection</remarks>
        </member>
        <member name="T:Ciloci.Flee.ExpressionParserOptions">
            <summary>
        Holds settings which enable customization of the expression parser.
      </summary>
        </member>
        <member name="M:Ciloci.Flee.ExpressionParserOptions.RecreateParser">
            <summary>
        Updates the expression parser using the settings provided in this class.
      </summary>
        </member>
        <member name="P:Ciloci.Flee.ExpressionParserOptions.DateTimeFormat">
            <summary>Gets or sets the format to use for parsing DateTime literals</summary><value>The format to use</value><remarks>
        Use this property to set the format that will be used to parse DateTime literals.  Expressions which have DateTime literals that are not parseable using this format will fail to compile.
      </remarks><example>When set to "dd-MM-yyyy", an expression such as "#04-07-2008#" would be parsed to the corresponding DateTime value.</example>
        </member>
        <member name="P:Ciloci.Flee.ExpressionParserOptions.RequireDigitsBeforeDecimalPoint">
            <summary>Gets or sets a value that determines if literals for real numbers must have digits before the decimal point.</summary><value>True to require digits (ie: 0.56); False otherwise (ie: .56)</value>
        </member>
        <member name="P:Ciloci.Flee.ExpressionParserOptions.DecimalSeparator">
            <summary>Gets or sets the character to use as the decimal separator for real number literals.</summary>
        </member>
        <member name="P:Ciloci.Flee.ExpressionParserOptions.FunctionArgumentSeparator">
            <summary>Gets or sets the character to use to separate function arguments.</summary>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.RecursiveDescentParser" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.Parser" -->
        <member name="F:PerCederberg.Grammatica.Runtime.Parser.initialized">
            The parser initialization flag.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Parser.tokenizer">
            The tokenizer to use.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Parser.analyzer">
            The analyzer to use for callbacks.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Parser.patterns">
            The list of production patterns.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Parser.patternIds">
            The map with production patterns and their id:s. This map
            contains the production patterns indexed by their id:s.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Parser.tokens">
            The list of buffered tokens. This list will contain tokens that
            have been read from the tokenizer, but not yet consumed.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Parser.errorLog">
            The error log. All parse errors will be added to this log as
            the parser attempts to recover from the error. If the error
            count is higher than zero (0), this log will be thrown as the
            result from the parse() method.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.Parser.errorRecovery">
            The error recovery counter. This counter is initially set to a
            negative value to indicate that no error requiring recovery
            has been encountered. When a parse error is found, the counter
            is set to three (3), and is then decreased by one for each
            correctly read token until it reaches zero (0).
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.#ctor(System.IO.TextReader)">
             Creates a new parser.
            
             @param input          the input stream to read from
            
             @throws ParserCreationException if the tokenizer couldn't be
                         initialized correctly
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.#ctor(System.IO.TextReader,PerCederberg.Grammatica.Runtime.Analyzer)">
             Creates a new parser.
            
             @param input          the input stream to read from
             @param analyzer       the analyzer callback to use
            
             @throws ParserCreationException if the tokenizer couldn't be
                         initialized correctly
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.#ctor(PerCederberg.Grammatica.Runtime.Tokenizer)">
             Creates a new parser.
            
             @param tokenizer       the tokenizer to use
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.#ctor(PerCederberg.Grammatica.Runtime.Tokenizer,PerCederberg.Grammatica.Runtime.Analyzer)">
             Creates a new parser.
            
             @param tokenizer       the tokenizer to use
             @param analyzer        the analyzer callback to use
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.NewTokenizer(System.IO.TextReader)">
             Creates a new tokenizer for this parser. Can be overridden by
             a subclass to provide a custom implementation.
            
             @param in             the input stream to read from
            
             @return the tokenizer created
            
             @throws ParserCreationException if the tokenizer couldn't be
                         initialized correctly
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.NewAnalyzer">
             Creates a new analyzer for this parser. Can be overridden by a
             subclass to provide a custom implementation.
            
             @return the analyzer created
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.GetTokenizer">
             Returns the tokenizer in use by this parser.
            
             @return the tokenizer in use by this parser
            
             @since 1.4
            
             @see #Tokenizer
            
             @deprecated Use the Tokenizer property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.GetAnalyzer">
             Returns the analyzer in use by this parser.
            
             @return the analyzer in use by this parser
            
             @since 1.4
            
             @see #Analyzer
            
             @deprecated Use the Analyzer property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.SetInitialized(System.Boolean)">
             Sets the parser initialized flag. Normally this flag is set by
             the prepare() method, but this method allows further
             modifications to it.
            
             @param initialized    the new initialized flag
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.AddPattern(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Adds a new production pattern to the parser. The first pattern
             added is assumed to be the starting point in the grammar. The
             patterns added may be validated to some extent.
            
             @param pattern        the pattern to add
            
             @throws ParserCreationException if the pattern couldn't be
                         added correctly to the parser
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.Prepare">
             Initializes the parser. All the added production patterns will
             be analyzed for ambiguities and errors. This method also
             initializes internal data structures used during the parsing.
            
             @throws ParserCreationException if the parser couldn't be
                         initialized correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.CheckPattern(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Checks a production pattern for completeness. If some rule
             in the pattern referenced an production pattern not added
             to this parser, a parser creation exception will be thrown.
            
             @param pattern        the production pattern to check
            
             @throws ParserCreationException if the pattern referenced a
                         pattern not added to this parser
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.CheckAlternative(System.String,PerCederberg.Grammatica.Runtime.ProductionPatternAlternative)">
             Checks a production pattern alternative for completeness.
             If some element in the alternative referenced a production
             pattern not added to this parser, a parser creation
             exception will be thrown.
            
             @param name           the name of the pattern being checked
             @param alt            the production pattern alternative
            
             @throws ParserCreationException if the alternative
                         referenced a pattern not added to this parser
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.CheckElement(System.String,PerCederberg.Grammatica.Runtime.ProductionPatternElement)">
             Checks a production pattern element for completeness. If
             the element references a production pattern not added to
             this parser, a parser creation exception will be thrown.
            
             @param name           the name of the pattern being checked
             @param elem           the production pattern element to check
            
             @throws ParserCreationException if the element referenced a
                         pattern not added to this parser
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.Reset(System.IO.TextReader)">
             Resets this parser for usage with another input stream. The
             associated tokenizer and analyzer will also be reset. This
             method will clear all the internal state and the error log in
             the parser. It is normally called in order to reuse a parser
             and tokenizer pair with multiple input streams, thereby
             avoiding the cost of re-analyzing the grammar structures.
            
             @param input          the new input stream to read
            
             @see Tokenizer#Reset
             @see Analyzer#Reset
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.Parse">
             Parses the token stream and returns a parse tree. This
             method will call Prepare() if not previously called. It
             will also call the Reset() method, to make sure that only
             the Tokenizer.Reset() method must be explicitly called in
             order to reuse a parser for multiple input streams. In case
             of a parse error, the parser will attempt to recover and
             throw all the errors found in a parser log exception in the
             end.
            
             @return the parse tree
            
             @throws ParserCreationException if the parser couldn't be
                         initialized correctly
             @throws ParserLogException if the input couldn't be parsed
                         correctly
            
             @see #Prepare
             @see #Reset
             @see Tokenizer#Reset
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.ParseStart">
             Parses the token stream and returns a parse tree.
            
             @return the parse tree
            
             @throws ParseException if the input couldn't be parsed
                         correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.NewProduction(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Factory method to create a new production node. This method
             can be overridden to provide other production implementations
             than the default one.
            
             @param pattern        the production pattern
            
             @return the new production node
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.AddError(PerCederberg.Grammatica.Runtime.ParseException,System.Boolean)">
             Adds an error to the error log. If the parser is in error
             recovery mode, the error will not be added to the log. If the
             recovery flag is set, this method will set the error recovery
             counter thus enter error recovery mode. Only lexical or
             syntactical errors require recovery, so this flag shouldn't be
             set otherwise.
            
             @param e              the error to add
             @param recovery       the recover flag
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.GetPattern(System.Int32)">
             Returns the production pattern with the specified id.
            
             @param id             the production pattern id
            
             @return the production pattern found, or
                     null if non-existent
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.GetStartPattern">
             Returns the production pattern for the starting production.
            
             @return the start production pattern, or
                     null if no patterns have been added
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.GetPatterns">
             Returns the ordered set of production patterns.
            
             @return the ordered set of production patterns
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.EnterNode(PerCederberg.Grammatica.Runtime.Node)">
             Handles the parser entering a production. This method calls the
             appropriate analyzer callback if the node is not hidden. Note
             that this method will not call any callback if an error
             requiring recovery has ocurred.
            
             @param node           the parse tree node
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.ExitNode(PerCederberg.Grammatica.Runtime.Node)">
             Handles the parser leaving a production. This method calls the
             appropriate analyzer callback if the node is not hidden, and
             returns the result. Note that this method will not call any
             callback if an error requiring recovery has ocurred.
            
             @param node           the parse tree node
            
             @return the parse tree node, or
                     null if no parse tree should be created
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.AddNode(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.Node)">
             Handles the parser adding a child node to a production. This
             method calls the appropriate analyzer callback. Note that this
             method will not call any callback if an error requiring
             recovery has ocurred.
            
             @param node           the parent parse tree node
             @param child          the child parse tree node, or null
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.NextToken">
             Reads and consumes the next token in the queue. If no token
             was available for consumation, a parse error will be
             thrown.
            
             @return the token consumed
            
             @throws ParseException if the input stream couldn't be read or
                         parsed correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.NextToken(System.Int32)">
             Reads and consumes the next token in the queue. If no token was
             available for consumation, a parse error will be thrown. A
             parse error will also be thrown if the token id didn't match
             the specified one.
            
             @param id             the expected token id
            
             @return the token consumed
            
             @throws ParseException if the input stream couldn't be parsed
                         correctly, or if the token wasn't expected
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.PeekToken(System.Int32)">
             Returns a token from the queue. This method is used to check
             coming tokens before they have been consumed. Any number of
             tokens forward can be checked.
            
             @param steps          the token queue number, zero (0) for first
            
             @return the token in the queue, or
                     null if no more tokens in the queue
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.ToString">
             Returns a string representation of this parser. The string will
             contain all the production definitions and various additional
             information.
            
             @return a detailed string representation of this parser
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.ToString(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Returns a string representation of a production pattern.
            
             @param prod           the production pattern
            
             @return a detailed string representation of the pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.ToString(PerCederberg.Grammatica.Runtime.ProductionPatternAlternative)">
             Returns a string representation of a production pattern
             alternative.
            
             @param alt            the production pattern alternative
            
             @return a detailed string representation of the alternative
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.ToString(PerCederberg.Grammatica.Runtime.ProductionPatternElement)">
             Returns a string representation of a production pattern
             element.
            
             @param elem           the production pattern element
            
             @return a detailed string representation of the element
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.Parser.GetTokenDescription(System.Int32)">
             Returns a token description for a specified token.
            
             @param token          the token to describe
            
             @return the token description
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Parser.Tokenizer">
             The tokenizer property (read-only). This property contains
             the tokenizer in use by this parser.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.Parser.Analyzer">
             The analyzer property (read-only). This property contains
             the analyzer in use by this parser.
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.#ctor(System.IO.TextReader)">
             Creates a new parser.
            
             @param input          the input stream to read from
            
             @throws ParserCreationException if the tokenizer couldn't be
                         initialized correctly
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.#ctor(System.IO.TextReader,PerCederberg.Grammatica.Runtime.Analyzer)">
             Creates a new parser.
            
             @param input          the input stream to read from
             @param analyzer       the analyzer callback to use
            
             @throws ParserCreationException if the tokenizer couldn't be
                         initialized correctly
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.#ctor(PerCederberg.Grammatica.Runtime.Tokenizer)">
             Creates a new parser.
            
             @param tokenizer      the tokenizer to use
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.#ctor(PerCederberg.Grammatica.Runtime.Tokenizer,PerCederberg.Grammatica.Runtime.Analyzer)">
             Creates a new parser.
            
             @param tokenizer      the tokenizer to use
             @param analyzer       the analyzer callback to use
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.AddPattern(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Adds a new production pattern to the parser. The pattern
             will be added last in the list. The first pattern added is
             assumed to be the starting point in the grammar. The
             pattern will be validated against the grammar type to some
             extent.
            
             @param pattern        the pattern to add
            
             @throws ParserCreationException if the pattern couldn't be
                         added correctly to the parser
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.Prepare">
             Initializes the parser. All the added production patterns
             will be analyzed for ambiguities and errors. This method
             also initializes the internal data structures used during
             the parsing.
            
             @throws ParserCreationException if the parser couldn't be
                         initialized correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseStart">
             Parses the input stream and creates a parse tree.
            
             @return the parse tree
            
             @throws ParseException if the input couldn't be parsed
                         correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParsePattern(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Parses a production pattern. A parse tree node may or may
             not be created depending on the analyzer callbacks.
            
             @param pattern        the production pattern to parse
            
             @return the parse tree node created, or null
            
             @throws ParseException if the input couldn't be parsed
                         correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseAlternative(PerCederberg.Grammatica.Runtime.ProductionPatternAlternative)">
             Parses a production pattern alternative. A parse tree node
             may or may not be created depending on the analyzer
             callbacks.
            
             @param alt            the production pattern alternative
            
             @return the parse tree node created, or null
            
             @throws ParseException if the input couldn't be parsed
                         correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ParseElement(PerCederberg.Grammatica.Runtime.Production,PerCederberg.Grammatica.Runtime.ProductionPatternElement)">
             Parses a production pattern element. All nodes parsed may
             or may not be added to the parse tree node specified,
             depending on the analyzer callbacks.
            
             @param node           the production parse tree node
             @param elem           the production pattern element to parse
            
             @throws ParseException if the input couldn't be parsed
                         correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.IsNext(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Checks if the next tokens match a production pattern. The
             pattern look-ahead set will be used if existing, otherwise
             this method returns false.
            
             @param pattern        the pattern to check
            
             @return true if the next tokens match, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.IsNext(PerCederberg.Grammatica.Runtime.ProductionPatternAlternative)">
             Checks if the next tokens match a production pattern
             alternative. The pattern alternative look-ahead set will be
             used if existing, otherwise this method returns false.
            
             @param alt            the pattern alternative to check
            
             @return true if the next tokens match, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.IsNext(PerCederberg.Grammatica.Runtime.ProductionPatternElement)">
             Checks if the next tokens match a production pattern
             element. If the element has a look-ahead set it will be
             used, otherwise the look-ahead set of the referenced
             production or token will be used.
            
             @param elem           the pattern element to check
            
             @return true if the next tokens match, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CalculateLookAhead(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Calculates the look-ahead needed for the specified production
             pattern. This method attempts to resolve any conflicts and
             stores the results in the pattern look-ahead object.
            
             @param pattern        the production pattern
            
             @throws ParserCreationException if the look-ahead set couldn't
                         be determined due to inherent ambiguities
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CalculateLookAhead(PerCederberg.Grammatica.Runtime.ProductionPatternAlternative,System.Int32)">
             Calculates the look-aheads needed for the specified pattern
             alternative. This method attempts to resolve any conflicts in
             optional elements by recalculating look-aheads for referenced
             productions.
            
             @param alt            the production pattern alternative
             @param pos            the pattern element position
            
             @throws ParserCreationException if the look-ahead set couldn't
                         be determined due to inherent ambiguities
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.FindLookAhead(PerCederberg.Grammatica.Runtime.ProductionPattern,System.Int32,PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack,PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Finds the look-ahead set for a production pattern. The maximum
             look-ahead length must be specified. It is also possible to
             specify a look-ahead set filter, which will make sure that
             unnecessary token sequences will be avoided.
            
             @param pattern        the production pattern
             @param length         the maximum look-ahead length
             @param stack          the call stack used for loop detection
             @param filter         the look-ahead set filter
            
             @return the look-ahead set for the production pattern
            
             @throws ParserCreationException if an infinite loop was found
                         in the grammar
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.FindLookAhead(PerCederberg.Grammatica.Runtime.ProductionPatternAlternative,System.Int32,System.Int32,PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack,PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Finds the look-ahead set for a production pattern alternative.
             The pattern position and maximum look-ahead length must be
             specified. It is also possible to specify a look-ahead set
             filter, which will make sure that unnecessary token sequences
             will be avoided.
            
             @param alt            the production pattern alternative
             @param length         the maximum look-ahead length
             @param pos            the pattern element position
             @param stack          the call stack used for loop detection
             @param filter         the look-ahead set filter
            
             @return the look-ahead set for the pattern alternative
            
             @throws ParserCreationException if an infinite loop was found
                         in the grammar
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.FindLookAhead(PerCederberg.Grammatica.Runtime.ProductionPatternElement,System.Int32,PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack,PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Finds the look-ahead set for a production pattern element. The
             maximum look-ahead length must be specified. This method takes
             the element repeats into consideration when creating the
             look-ahead set, but does NOT include an empty sequence even if
             the minimum count is zero (0). It is also possible to specify a
             look-ahead set filter, which will make sure that unnecessary
             token sequences will be avoided.
            
             @param elem           the production pattern element
             @param length         the maximum look-ahead length
             @param stack          the call stack used for loop detection
             @param filter         the look-ahead set filter
            
             @return the look-ahead set for the pattern element
            
             @throws ParserCreationException if an infinite loop was found
                         in the grammar
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.FindLookAhead(PerCederberg.Grammatica.Runtime.ProductionPatternElement,System.Int32,System.Int32,PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack,PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Finds the look-ahead set for a production pattern element. The
             maximum look-ahead length must be specified. This method does
             NOT take the element repeat into consideration when creating
             the look-ahead set. It is also possible to specify a look-ahead
             set filter, which will make sure that unnecessary token
             sequences will be avoided.
            
             @param elem           the production pattern element
             @param length         the maximum look-ahead length
             @param dummy          a parameter to distinguish the method
             @param stack          the call stack used for loop detection
             @param filter         the look-ahead set filter
            
             @return the look-ahead set for the pattern element
            
             @throws ParserCreationException if an infinite loop was found
                         in the grammar
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.FindConflicts(PerCederberg.Grammatica.Runtime.ProductionPattern,System.Int32)">
             Returns a look-ahead set with all conflics between
             alternatives in a production pattern.
            
             @param pattern        the production pattern
             @param maxLength      the maximum token sequence length
            
             @return a look-ahead set with the conflicts found
            
             @throws ParserCreationException if an inherent ambiguity was
                         found among the look-ahead sets
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.FindConflicts(System.String,System.String,PerCederberg.Grammatica.Runtime.LookAheadSet,PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Returns a look-ahead set with all conflicts between two
             look-ahead sets.
            
             @param pattern        the pattern name being analyzed
             @param location       the pattern location
             @param set1           the first look-ahead set
             @param set2           the second look-ahead set
            
             @return a look-ahead set with the conflicts found
            
             @throws ParserCreationException if an inherent ambiguity was
                         found among the look-ahead sets
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.FindUnion(PerCederberg.Grammatica.Runtime.ProductionPattern)">
             Returns the union of all alternative look-ahead sets in a
             production pattern.
            
             @param pattern        the production pattern
            
             @return a unified look-ahead set
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ThrowParseException(PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Throws a parse exception that matches the specified look-ahead
             set. This method will take into account any initial matching
             tokens in the look-ahead set.
            
             @param set            the look-ahead set to match
            
             @throws ParseException always thrown by this method
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.ThrowAmbiguityException(System.String,System.String,PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Throws a parser creation exception for an ambiguity. The
             specified look-ahead set contains the token conflicts to be
             reported.
            
             @param pattern        the production pattern name
             @param location       the production pattern location, or null
             @param set            the look-ahead set with conflicts
            
             @throws ParserCreationException always thrown by this method
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack">
            A name value stack. This stack is used to detect loops and
            repetitions of the same production during look-ahead analysis.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack.nameStack">
            A stack with names.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack.valueStack">
            A stack with values.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack.Contains(System.String)">
             Checks if the specified name is on the stack.
            
             @param name           the name to search for
            
             @return true if the name is on the stack, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack.Contains(System.String,System.Int32)">
             Checks if the specified name and value combination is on
             the stack.
            
             @param name           the name to search for
             @param value          the value to search for
            
             @return true if the combination is on the stack, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack.Clear">
            Clears the stack. This method removes all elements on
            the stack.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack.Push(System.String,System.Int32)">
             Adds a new element to the top of the stack.
            
             @param name           the stack name
             @param value          the stack value
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RecursiveDescentParser.CallStack.Pop">
            Removes the top element of the stack.
        </member>
        <member name="T:Ciloci.Flee.PropertyDictionary">
            <summary>
            Helper class for storing strongly-typed properties
            </summary>
            <remarks></remarks>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.ProductionPatternElement" -->
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPatternElement.token">
            The token flag. This flag is true for token elements, and
            false for production elements.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPatternElement.id">
            The node identity.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPatternElement.min">
            The minimum occurance count.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPatternElement.max">
            The maximum occurance count.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ProductionPatternElement.lookAhead">
            The look-ahead set associated with this element.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternElement.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32)">
             Creates a new element. If the maximum value if zero (0) or
             negative, it will be set to Int32.MaxValue.
            
             @param isToken        the token flag
             @param id             the node identity
             @param min            the minimum number of occurancies
             @param max            the maximum number of occurancies, or
                                   negative for infinite
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternElement.GetId">
             Returns the node identity.
            
             @return the node identity
            
             @see #Id
            
             @deprecated Use the Id property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternElement.GetMinCount">
             Returns the minimum occurence count.
            
             @return the minimum occurence count
            
             @see #MinCount
            
             @deprecated Use the MinCount property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternElement.GetMaxCount">
             Returns the maximum occurence count.
            
             @return the maximum occurence count
            
             @see #MaxCount
            
             @deprecated Use the MaxCount property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternElement.IsToken">
             Returns true if this element represents a token.
            
             @return true if the element is a token, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternElement.IsProduction">
             Returns true if this element represents a production.
            
             @return true if the element is a production, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternElement.IsMatch(PerCederberg.Grammatica.Runtime.Token)">
             Checks if a specific token matches this element. This
             method will only return true if this element is a token
             element, and the token has the same id and this element.
            
             @param token          the token to check
            
             @return true if the token matches this element, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternElement.Equals(System.Object)">
             Checks if this object is equal to another. This method only
             returns true for another identical production pattern
             element.
            
             @param obj            the object to compare with
            
             @return true if the object is identical to this one, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternElement.GetHashCode">
             Returns a hash code for this object.
            
             @return a hash code for this object
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ProductionPatternElement.ToString">
             Returns a string representation of this object.
            
             @return a string representation of this object
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPatternElement.Id">
             The node identity property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPatternElement.MinCount">
             The minimum occurence count property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPatternElement.MaxCount">
             The maximum occurence count property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ProductionPatternElement.LookAhead">
            The look-ahead set property. This is the look-ahead set
            associated with this alternative.
        </member>
        <member name="T:Ciloci.Flee.CalcEngine.CalculationEngine">
            <summary>
    Creates a calculation network which allows expressions to refer to the result of other expressions, tracks dependencies, and enables natural order recalculation.
  </summary><remarks>
  This class acts as a container for expressions.  As expressions are added to it, their dependencies are tracked and their result is cached.  Expressions defined
  in this class can reference other contained expressions.  Once all expressions are added, a natural order recalculate can be performed.
  </remarks><example>This example shows how to add expressions to the engine and have them reference other contained expressions:
  <code lang="C#">
ExpressionContext context = new ExpressionContext();
VariableCollection variables = context.Variables;

// Add some variables
variables.Add("x", 100);
variables.Add("y", 200);

// Add an expression to the calculation engine as "a"
engine.Add("a", "x * 2", context);

// Add an expression to the engine as "b"
engine.Add("b", "y + 100", context);

// Add an expression at "c" that uses the results of "a" and "b"
// Notice that we have to prefix the expression names with a '$'
engine.Add("c", "$a + $b", context);

// Get the value of "c"
int result = engine.GetResult&lt;int&gt;("c");

// Update a variable on the "a" expression
variables["x"] = 200;

// Recalculate it
engine.Recalculate("a");

// Get the updated result
result = engine.GetResult&lt;int&gt;("c");
      </code>
  </example>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.Add(System.String,System.String,Ciloci.Flee.ExpressionContext)">
            <summary>
      Adds an expression to the calculation engine.
    </summary><param name="atomName">The name that the expression will be associated with</param><param name="expression">The expression to add</param><param name="context">The context for the expression</param><remarks>Use this method to add an expression to the engine and associate it with a name</remarks>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.Remove(System.String)">
            <summary>
  Removes an expression and all its dependents from the calculation engine.
  </summary><param name="name">The name whose expression to remove</param><returns>True if the name was removed from the engine; False otherwise</returns><remarks>Use this method to remove an expression and all its dependents from the calculation engine.  No exception is thrown if the
  name does not exist in the engine.</remarks>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.CreateBatchLoader">
            <summary>
      Creates a BatchLoader that can be used to populate the calculation engine in one batch.
    </summary><returns>A new instance of the BatchLoader class</returns><remarks>
      Use this method to create a BatchLoader instance.
    </remarks>
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.BatchLoad(Ciloci.Flee.CalcEngine.BatchLoader)">
            <summary>
      Populates the calculation engine from the given BatchLoader.
    </summary><param name="loader">The batch loader instance to use</param><remarks>
      Call this method to load the calculation engine with all the expressions in the given batch loader.
    </remarks>
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.GetResult``1(System.String)">
            <summary>
    Gets the cached result of a contained expression.
  </summary><typeparam name="T">The type of the expression's result.</typeparam><param name="name">The name that the expression is associated with</param><returns>The cached result of evaluating the expression</returns><remarks>Use this method after a recalculate to get the updated value of an expression.</remarks>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.GetResult(System.String)">
            <summary>
  Gets the cached result of a contained expression.
  </summary><param name="name">The name that the expression is associated with</param><returns>The cached result of evaluating the expression</returns><remarks>Use this method after a recalculate to get the updated value of an expression.</remarks>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.GetExpression(System.String)">
            <summary>
  Gets the expression associated with a name.
  </summary><param name="name">The name that the expression is associated with</param><returns>The expression associated with the given name</returns><remarks>Use this method to obtain the expression associated with a name.</remarks>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.GetDependents(System.String)">
            <summary>
  Gets the names of the expressions that depend on a given name.
  </summary><param name="name">The name of the expression to look up</param><returns>The names of all expressions that depend on the expression with the given name</returns><remarks>Use this method to obtain all the expressions that depend on a given name.  For example: if a=100, b=200, and c=a+b, then calling 
  GetDependents("a") will return "c" since when the value of "a" changes, the value of "c" will also change.  This method is not recursive, so it
  will only return the names that directly depend on the given name.  This method is the inverse of <see cref="M:Ciloci.Flee.CalculationEngine.GetPrecedents(System.String)"/>
  </remarks>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.GetPrecedents(System.String)">
            <summary>
  Gets the names of the expressions that a given name depends on.
  </summary><param name="name">The name of the expression to look up</param><returns>The names of all expressions that the given name depends on</returns><remarks>
    Use this method to obtain all the expressions that a given name depends on.  For example: if a=100, b=200, and c=a+b, then calling
    GetPrecedents("c") will return "a, b" since when either "a" or "b" change, the value of "c" will also change.  This method is not recursive, so it
    will only return the names that the given name directly depends on.    This method is the inverse of <see cref="M:Ciloci.Flee.CalculationEngine.GetDependents(System.String)"/>
  </remarks>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.HasDependents(System.String)">
            <summary>
  Determines if an expression with a given name is referenced by any other expressions in the engine.
  </summary><param name="name">The name of the expression to look up</param><returns>True if the engine has expressions that depend on it; False otherwise</returns><remarks>
  Use this method to determine if the expression associated with a given name has any expressions that depend on it.  For example: you can use this method to allow 
  a user to remove an expression only when no other expressions depend on it.
  </remarks>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.HasPrecedents(System.String)">
            <summary>
      Determines if an expression with a given name depends on any other expression.
    </summary><param name="name">The name of the expression to look up</param><returns>True if the name has expressions that it depends on; False otherwise</returns><remarks>
      Use this method to determine if an expression depends on any other expressions.
    </remarks>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.Contains(System.String)">
            <summary>
      Determines if the engine contains an expression with a given name.
    </summary><param name="name">The name of the expression to look up</param><returns>True if the engine has an expression with the name; False otherwise</returns><remarks>
      Use this method to determine if the calculation engine contains an expression with a given name.
    </remarks>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.Recalculate(System.String[])">
            <summary>
  Performs a natural order recalculation of the engine.
  </summary><param name="roots">The names representing the starting points of the recalculation</param><remarks>This method will perform a natural order recalculate on the expressions in the engine.  The recalculation will start at the given roots
  and continue with all their dependents.  If no roots are given, then a recalculation of all expressions is performed.</remarks><exception cref="T:Ciloci.Flee.CircularReferenceException">A recalculate is requested on an engine containing a circular reference</exception>	
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.CalculationEngine.Clear">
            <summary>
  Clears all expressions from the CalculationEngine
  </summary><remarks>Use this method to reset the CalculationEngine to the empty state.</remarks>	
        </member>
        <member name="E:Ciloci.Flee.CalcEngine.CalculationEngine.NodeRecalculated">
            <summary>
  Occurs when the calculation engine recalculates a node.
  </summary><remarks>You can listen to this event to be notified when a node in the calculation engine is recalculated.</remarks>	
        </member>
        <member name="P:Ciloci.Flee.CalcEngine.CalculationEngine.Count">
            <summary>
  Gets the number of expressions contained in the calculation engine.
  </summary><value>The number of expressions in the calculation engine</value><remarks>
  Use this property to see how many expressions are contained in the calculation engine.
  </remarks>	
        </member>
        <member name="P:Ciloci.Flee.CalcEngine.CalculationEngine.DependencyGraph">
            <summary>
  Gets a string representation of the engine's dependency graph.    
  </summary><value>A string representing the graph.</value><remarks>Use this property to get a string version of the engine's dependency graph.  There will be one line for each dependency. Each line will
  be of the format "[reference] -&gt; [dependant1, dependant2]" and is read as "A change in [reference] will cause a change in [dependant]".</remarks>	
        </member>
        <member name="T:Ciloci.Flee.ExpressionImports">
            <summary>
        Holds all the types whose static members can be used in an expression.
      </summary><remarks>
        Use this class to allow the static functions, methods, and properties of a type
        to be used in an expression.  By default, no types are imported.
      </remarks><example>
        This example shows how to use this class to let an expression use all the static members of the Math class:
        <code lang="C#">
          // Define the context of our expression
          ExpressionContext context = new ExpressionContext();
          // Import all members of the Math type into the default namespace
          context.Imports.AddType(typeof(Math));
        </code>
      </example>	
            Imports of static members into an expression
        </member>
        <member name="M:Ciloci.Flee.ExpressionImports.AddType(System.Type,System.String)">
            <overloads>Makes the static and public members of a type available for use in an expression</overloads><summary>Imports all public and static members of a type into a specific namespace and makes them available to an expression.</summary><param name="t">The type to import</param><param name="ns">The namespace to import the type into -or- the empty string to import into the default namespace</param><remarks>
        Use this method to import a type into an expression.  All static and public methods, fields, and properties of the type will be
        directly accessible in the expression.  If the namespace parameter is the empty string, the type's members will be able to be referenced
        without any qualification.  Otherwise, they will be imported into the specified namespace and will need to be qualified with it before being accessed.  The
        imported type is deemed accessible if it is either public or in the same module as the expression owner.
      </remarks><example>
        If you import the Math type into the default namespace, you can reference its members in the expression: "cos(1.0)".
        If you import same type into the "Math" namespace, you will need to qualify its members like so: "math.cos(1.0)".
      </example><exception cref="T:System.ArgumentException">The imported type is not accessible</exception>	
        </member>
        <member name="M:Ciloci.Flee.ExpressionImports.AddType(System.Type)">
            <!-- Aucun élément correspondant n'a été trouvé pour la balise include suivante --><include file="Resources/DocComments.xml" path="DocComments/ExpressionImports/Addtype2/*"/>	
        </member>
        <member name="M:Ciloci.Flee.ExpressionImports.AddMethod(System.String,System.Type,System.String)">
            <overloads>Imports a single public and static method into an expression.</overloads><summary>Imports a public and static method of a type into a given namespace and makes it available to an expression.</summary><param name="methodName">The name of the method to import</param><param name="t">The type on which to lookup the method</param><param name="ns">The namespace to import the method into -or- the empty string to import into the default namespace</param><remarks>
        Use this method to import a single static, public method into an expression.  The method with the given name will be looked
        up on the type argument and added into the specified namespace.
      </remarks><exception cref="T:System.ArgumentException">The type the method belongs to is not accessible</exception>	
        </member>
        <member name="M:Ciloci.Flee.ExpressionImports.AddMethod(System.Reflection.MethodInfo,System.String)">
            <summary>Imports a public and static method of a type into a given namespace and makes it available to an expression.</summary><param name="mi">The method to import</param><param name="ns">The namespace to import the method into -or- the empty string to import into the default namespace</param><remarks>
        Use this method to import a single static, public method into an expression.  This overload is used when you already have a specific
        MethodInfo available.
      </remarks><exception cref="T:System.ArgumentException">The type the method belongs to is not accessible</exception>	
        </member>
        <member name="M:Ciloci.Flee.ExpressionImports.ImportBuiltinTypes">
            <summary>
        Imports the builtin types into an expression
      </summary><remarks>
        Call this method to import the builtin types (int, string, double) into an expression.  After this method is called, you can use members of the
        builtin types in an expression ie: <pre>int.maxvalue * 2</pre>
      </remarks>	
        </member>
        <member name="P:Ciloci.Flee.ExpressionImports.RootImport">
            <summary>
        Gets the root import of the context.
      </summary><value>The root import.</value><remarks>
        Use this property to access the root import of an expression.
      </remarks>	
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.RE.RegExpException" -->
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExpException.type">
            The error type constant.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExpException.position">
            The error position.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExpException.pattern">
            The regular expression pattern.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExpException.#ctor(PerCederberg.Grammatica.Runtime.RE.RegExpException.ErrorType,System.Int32,System.String)">
             Creates a new regular expression exception.
            
             @param type           the error type constant
             @param pos            the error position
             @param pattern        the regular expression pattern
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExpException.GetMessage">
             Returns the exception error message.
            
             @return the exception error message
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.RE.RegExpException.Message">
            The message property. This property contains the detailed
            exception error message.
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.RE.RegExpException.ErrorType">
            The error type enumeration.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExpException.ErrorType.UNEXPECTED_CHARACTER">
            The unexpected character error constant. This error is
            used when a character was read that didn't match the
            allowed set of characters at the given position.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExpException.ErrorType.UNTERMINATED_PATTERN">
            The unterminated pattern error constant. This error is
            used when more characters were expected in the pattern.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExpException.ErrorType.UNSUPPORTED_SPECIAL_CHARACTER">
            The unsupported special character error constant. This
            error is used when special regular expression
            characters are used in the pattern, but not supported
            in this implementation.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExpException.ErrorType.UNSUPPORTED_ESCAPE_CHARACTER">
            The unsupported escape character error constant. This
            error is used when an escape character construct is
            used in the pattern, but not supported in this
            implementation.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExpException.ErrorType.INVALID_REPEAT_COUNT">
            The invalid repeat count error constant. This error is
            used when a repetition count of zero is specified, or
            when the minimum exceeds the maximum.
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.RE.RegExp" -->
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExp.element">
            The base regular expression element.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExp.pattern">
            The regular expression pattern.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExp.ignoreCase">
            The character case ignore flag.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.RegExp.pos">
            The current position in the pattern. This variable is used by
            the parsing methods.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.#ctor(System.String)">
             Creates a new case-sensitive regular expression.
            
             @param pattern        the regular expression pattern
            
             @throws RegExpException if the regular expression couldn't be
                         parsed correctly
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.#ctor(System.String,System.Boolean)">
             Creates a new regular expression. The regular expression
             can be either case-sensitive or case-insensitive.
            
             @param pattern        the regular expression pattern
             @param ignoreCase     the character case ignore flag
            
             @throws RegExpException if the regular expression couldn't be
                         parsed correctly
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.Matcher(System.String)">
             Creates a new matcher for the specified string.
            
             @param str            the string to work with
            
             @return the regular expresion matcher
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.Matcher(PerCederberg.Grammatica.Runtime.ReaderBuffer)">
             Creates a new matcher for the specified look-ahead
             character input stream.
            
             @param buffer         the character input buffer
            
             @return the regular expresion matcher
            
             @since 1.5
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ToString">
             Returns a string representation of the regular expression.
            
             @return a string representation of the regular expression
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ParseExpr">
             Parses a regular expression. This method handles the Expr
             production in the grammar (see regexp.grammar).
            
             @return the element representing this expression
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ParseTerm">
             Parses a regular expression term. This method handles the
             Term production in the grammar (see regexp.grammar).
            
             @return the element representing this term
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ParseFact">
             Parses a regular expression factor. This method handles the
             Fact production in the grammar (see regexp.grammar).
            
             @return the element representing this factor
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ParseAtom">
             Parses a regular expression atom. This method handles the
             Atom production in the grammar (see regexp.grammar).
            
             @return the element representing this atom
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ParseAtomModifier(PerCederberg.Grammatica.Runtime.RE.Element)">
             Parses a regular expression atom modifier. This method handles
             the AtomModifier production in the grammar (see regexp.grammar).
            
             @param elem           the element to modify
            
             @return the modified element
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ParseCharSet">
             Parses a regular expression character set. This method handles
             the contents of the '[...]' construct in a regular expression.
            
             @return the element representing this character set
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ParseChar">
             Parses a regular expression character. This method handles
             a single normal character in a regular expression.
            
             @return the element representing this character
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ParseEscapeChar">
             Parses a regular expression character escape. This method
             handles a single character escape in a regular expression.
            
             @return the element representing this character escape
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.FixChar(System.Char)">
             Adjusts a character for inclusion in a string or character
             set element. For case-insensitive regular expressions, this
             transforms the character to lower-case.
            
             @param c               the input character
            
             @return the adjusted character
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ReadNumber">
             Reads a number from the pattern. If the next character isn't a
             numeric character, an exception is thrown. This method reads
             several consecutive numeric characters.
            
             @return the numeric value read
            
             @throws RegExpException if an error was encountered in the
                         pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ReadChar">
             Reads the next character in the pattern. If no next character
             exists, an exception is thrown.
            
             @return the character read
            
             @throws RegExpException if no next character was available in
                         the pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.ReadChar(System.Char)">
             Reads the next character in the pattern. If the character
             wasn't the specified one, an exception is thrown.
            
             @param c              the character to read
            
             @return the character read
            
             @throws RegExpException if the character read didn't match the
                         specified one, or if no next character was
                         available in the pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.PeekChar(System.Int32)">
             Returns a character that has not yet been read from the
             pattern. If the requested position is beyond the end of the
             pattern string, -1 is returned.
            
             @param count          the preview position, from zero (0)
            
             @return the character found, or
                     -1 if beyond the end of the pattern string
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.RegExp.CombineElements(System.Collections.ArrayList)">
             Combines a list of elements. This method takes care to always
             concatenate adjacent string elements into a single string
             element.
            
             @param list           the list with elements
            
             @return the combined element
        </member>
        <member name="T:Ciloci.Flee.BranchManager">
            <summary>
            Manages branch information and allows us to determine if we should emit a short or long branch
            </summary>
        </member>
        <member name="M:Ciloci.Flee.BranchManager.ComputeBranches">
            <summary>
            Determine whether to use short or long branches
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Ciloci.Flee.BranchManager.CountLongBranches(System.Collections.Generic.ICollection{Ciloci.Flee.BranchInfo})">
            <summary>
            Count the number of long branches in a set
            </summary>
            <param name="dest"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ciloci.Flee.BranchManager.FindBetweenBranches(Ciloci.Flee.BranchInfo,System.Collections.Generic.ICollection{Ciloci.Flee.BranchInfo})">
            <summary>
            Find all the branches between the start and end locations of a target branch
            </summary>
            <param name="target"></param>
            <param name="dest"></param>
            <remarks></remarks>
        </member>
        <member name="M:Ciloci.Flee.BranchManager.IsLongBranch(Ciloci.Flee.FleeILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Determine if a branch from a point to a label will be long
            </summary>
            <param name="ilg"></param>
            <param name="target"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ciloci.Flee.BranchManager.AddBranch(Ciloci.Flee.FleeILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Add a branch from a location to a target label
            </summary>
            <param name="ilg"></param>
            <param name="target"></param>
            <remarks></remarks>
        </member>
        <member name="M:Ciloci.Flee.BranchManager.FindLabel(System.Object)">
            <summary>
            Get a label by a key
            </summary>
            <param name="key"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ciloci.Flee.BranchManager.GetLabel(System.Object,Ciloci.Flee.FleeILGenerator)">
            <summary>
            Get a label by a key.  Create the label if it is not present.
            </summary>
            <param name="key"></param>
            <param name="ilg"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ciloci.Flee.BranchManager.HasLabel(System.Object)">
            <summary>
            Determines if we have a label for a key
            </summary>
            <param name="key"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:Ciloci.Flee.BranchManager.MarkLabel(Ciloci.Flee.FleeILGenerator,System.Reflection.Emit.Label)">
            <summary>
            Set the position for a label
            </summary>
            <param name="ilg"></param>
            <param name="target"></param>
            <remarks></remarks>
        </member>
        <member name="T:Ciloci.Flee.ILLocation">
            <summary>
            Represents a location in an IL stream
            </summary>
        </member>
        <member name="F:Ciloci.Flee.ILLocation.LongBranchAdjust">
            <summary>
            ' Long branch is 5 bytes; short branch is 2; so we adjust by the difference
            </summary>
        </member>
        <member name="F:Ciloci.Flee.ILLocation.Br_s_Length">
            <summary>
            Length of the Br_s opcode
            </summary>
        </member>
        <member name="M:Ciloci.Flee.ILLocation.AdjustForLongBranch(System.Int32)">
            <summary>
            Adjust our position by a certain amount of long branches
            </summary>
            <param name="longBranchCount"></param>
            <remarks></remarks>
        </member>
        <member name="M:Ciloci.Flee.ILLocation.IsLongBranch(Ciloci.Flee.ILLocation)">
            <summary>
            Determine if this branch is long
            </summary>
            <param name="target"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:Ciloci.Flee.BranchInfo">
            <summary>
            Represents a branch from a start location to an end location
            </summary>
        </member>
        <member name="T:ExpressionParser">
            <remarks>A token stream parser.</remarks>
        </member>
        <member name="M:ExpressionParser.#ctor(System.IO.TextReader)">
             <summary>Creates a new parser with a default analyzer.</summary>
            
             <param name="input">the input stream to read from</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParserCreationException">if the parser
             couldn't be initialized correctly</exception>
        </member>
        <member name="M:ExpressionParser.#ctor(System.IO.TextReader,PerCederberg.Grammatica.Runtime.Analyzer,Ciloci.Flee.ExpressionContext)">
             <summary>Creates a new parser.</summary>
            
             <param name="input">the input stream to read from</param>
            
             <param name="analyzer">the analyzer to parse with</param>
            
             <param name="expressionContext">the expression context to work on</param>
             
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParserCreationException">if the parser
             couldn't be initialized correctly</exception>
        </member>
        <member name="M:ExpressionParser.NewTokenizer(System.IO.TextReader)">
             <summary>Creates a new tokenizer for this parser. Can be overridden
             by a subclass to provide a custom implementation.</summary>
            
             <param name="input">the input stream to read from</param>
            
             <returns>the tokenizer created</returns>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParserCreationException">if the tokenizer
             couldn't be initialized correctly</exception>
        </member>
        <member name="M:ExpressionParser.CreatePatterns">
             <summary>Initializes the parser by creating all the production
             patterns.</summary>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParserCreationException">if the parser
             couldn't be initialized correctly</exception>
        </member>
        <member name="T:ExpressionParser.SynteticPatterns">
            <summary>An enumeration with the generated production node
            identity constants.</summary>
        </member>
        <member name="T:Ciloci.Flee.ArgumentList">
            <summary>
            Encapsulates an argument list
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Ciloci.Flee.ExpressionOptions">
            <summary>
        Allows customization of expression compilation.
      </summary><remarks>
        Use this class when you need to customize how an expression is compiled.  For example: by setting
        the <see cref="P:Ciloci.Flee.ExpressionOptions.Checked">Checked</see> property to true,
        you can cause all arithmetic and conversion operations to check for overflow.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionOptions.ResultType">
            <summary>Gets or sets the type of the expression's result.</summary><value>
        A <see cref="T:System.Type"/> indicating the desired result type.
      </value><remarks>
        Use this property to convert the result of an expression to a particular type.  Essentially, it acts as an implicit conversion from the final
        result of the expression to the given type.  When this property is set, the expression will attempt to convert its result to the set value.
        If the conversion is invalid, an <see cref="T:Ciloci.Flee.ExpressionCompileException"/> will be thrown.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionOptions.Checked">
            <summary>
        Gets or sets whether arithmetic and conversion operations check for overflow.
      </summary><value>True to emit overflow checks.  False to emit no overflow checks.</value><remarks>
        Setting this property to true will cause all arithmetic and conversion operations to emit overflow checks.  When
        one of those operations is executed and the resultant value cannot fit into the result type, an <see cref="T:System.OverflowException">OverflowException</see>
        will be thrown.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionOptions.StringComparison">
            <summary>
        Gets or sets a value that determines how strings will be compared.
      </summary><value>The type of string comparison to use.</value><remarks>
        Use this property to control the type of string comparison used in an expression that compares two strings.  For example: the result of
        the expression <span style="font-family: monospace;">"string" = "STRING"</span> will be <b>true</b> if the string comparison is set to ignore case
        and <b>false</b> otherwise.  The default is Ordinal.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionOptions.EmitToAssembly">
            <summary>
        Determines if the expression's IL will be saved to an assembly on disk.
      </summary><value>True to save the expression's IL to an assembly; false otherwise.</value><remarks>
        Use this method when you want to inspect the IL that an expression emits.  When set to true, the expression will save its IL to the assembly "Expression.dll"
        on disk.  You can then view the IL with a disassembler.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionOptions.OwnerMemberAccess">
            <summary>
        Determines which members on the expression owner are accessible.
      </summary><value>A combination of BindingFlags that determine which members are accessible.</value><remarks>
        Using this property, you can control which members on the expression owner are accessible from an expression.  For example: if users
        will be inputing expressions, you can prevent private members on the expression owner from being used.  You can use the
        <see cref="T:Ciloci.Flee.ExpressionOwnerMemberAccessAttribute"/> attribute on individual members to override the access set using this property.
        <note>
          The default is to only allow access to public members on the expression owner.  Currently, only the Public and NonPublic values of the BindingFlags enumeration
          are used.
        </note>
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionOptions.CaseSensitive">
            <summary>
        Determines how an expression matches member and variable names
      </summary><value>True to respect case when matching; False to ignore case</value><remarks>
        Use this property to control how an expression resolves member and variable names.  If set to true, variable and member
        names will be matched in a case-sensitive manner.  When false, case will be ignored.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionOptions.IntegersAsDoubles">
            <summary>Gets or sets whether all integer literals are treated as doubles</summary><value>True to treat all integer literals as doubles; False to use integers for integral numbers and floating point for real numbers (ie: any number with a decimal point)</value><remarks>
        Use this property to force all integer literals to doubles.  When set to true, an expression like "1/2" will return 0.5 since both integer
        literals are treated as doubles.  When false, the same expression will return 0 since an integer division will be performed.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionOptions.ParseCulture">
            <summary>Gets or sets the culture to use when parsing expressions</summary><value>The culture to use</value><remarks>
        Use this property to allow for parsing of expressions using culture-specific tokens.  This is useful, for example, when you
        wish to parse numbers using a culture-specific decimal separator.
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionOptions.RealLiteralDataType">
            <summary>Gets or sets the data type used for real literals when no explicit type is specified.</summary><value>A value specifying the type to use</value><remarks>
        Use this property to set the data type that will be used to represent real literals.  For example: if set to Decimal, all real literals (ie: 100.45) will be parsed into 
        a System.Decimal value.
      </remarks>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.TokenStringDFA" -->
        <member name="F:PerCederberg.Grammatica.Runtime.TokenStringDFA.ascii">
            The lookup table for root states, indexed by the first ASCII
            character. This array is used to for speed optimizing the
            first step in the match.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TokenStringDFA.nonAscii">
            The automaton state transition tree for non-ASCII characters.
            Each transition from one state to another is added to the tree
            with the corresponding character.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenStringDFA.#ctor">
            Creates a new empty string automaton.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenStringDFA.AddMatch(System.String,System.Boolean,PerCederberg.Grammatica.Runtime.TokenPattern)">
             Adds a string match to this automaton. New states and
             transitions will be added to extend this automaton to
             support the specified string.
            
             @param str              the string to match
             @param caseInsensitive  the case-insensitive flag
             @param value            the match value
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenStringDFA.Match(PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Boolean)">
             Checks if the automaton matches an input stream. The
             matching will be performed from a specified position. This
             method will not read any characters from the stream, just
             peek ahead. The comparison can be done either in
             case-sensitive or case-insensitive mode.
            
             @param input            the input stream to check
             @param pos              the starting position
             @param caseInsensitive  the case-insensitive flag
            
             @return the match value, or
                     null if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TokenStringDFA.ToString">
             Returns a detailed string representation of this automaton.
            
             @return a detailed string representation of this automaton
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.DFAState" -->
        <member name="F:PerCederberg.Grammatica.Runtime.DFAState.value">
            The token pattern matched at this state.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.DFAState.tree">
            The automaton state transition tree. Each transition from one
            state to another is added to the tree with the corresponding
            character.
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.TransitionTree" -->
        <member name="F:PerCederberg.Grammatica.Runtime.TransitionTree.value">
            The transition character. If this value is set to the zero
            character ('\0'), this tree is empty.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TransitionTree.state">
            The transition target state.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TransitionTree.left">
            The left subtree.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.TransitionTree.right">
            The right subtree.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TransitionTree.#ctor">
            Creates a new empty automaton transition tree.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TransitionTree.Find(System.Char,System.Boolean)">
             Finds an automaton state from the specified transition
             character. This method searches this transition tree for a
             matching transition. The comparison can optionally be done
             with a lower-case conversion of the character.
            
             @param c              the character to search for
             @param lowerCase      the lower-case conversion flag
            
             @return the automaton state found, or
                     null if no transition exists
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TransitionTree.Add(System.Char,System.Boolean,PerCederberg.Grammatica.Runtime.DFAState)">
             Adds a transition to this tree. If the lower-case flag is
             set, the character will be converted to lower-case before
             being added.
            
             @param c              the character to transition for
             @param lowerCase      the lower-case conversion flag
             @param state          the state to transition to
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.TransitionTree.PrintTo(System.Text.StringBuilder,System.String)">
             Prints the automaton tree to the specified string buffer.
            
             @param buffer         the string buffer
             @param indent         the current indentation
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.ParseException" -->
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.type">
            The error type.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.info">
            The additional information string.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.details">
            The additional details information. This variable is only
            used for unexpected token errors.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.line">
            The line number.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.column">
            The column number.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParseException.#ctor(PerCederberg.Grammatica.Runtime.ParseException.ErrorType,System.String,System.Int32,System.Int32)">
             Creates a new parse exception.
            
             @param type           the parse error type
             @param info           the additional information
             @param line           the line number, or -1 for unknown
             @param column         the column number, or -1 for unknown
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParseException.#ctor(PerCederberg.Grammatica.Runtime.ParseException.ErrorType,System.String,System.Collections.ArrayList,System.Int32,System.Int32)">
             Creates a new parse exception. This constructor is only
             used to supply the detailed information array, which is
             only used for expected token errors. The list then contains
             descriptions of the expected tokens.
            
             @param type           the parse error type
             @param info           the additional information
             @param details        the additional detailed information
             @param line           the line number, or -1 for unknown
             @param column         the column number, or -1 for unknown
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParseException.GetErrorType">
             Returns the error type.
            
             @return the error type
            
             @see #Type
            
             @deprecated Use the Type property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParseException.GetInfo">
             Returns the additional error information.
            
             @return the additional error information
            
             @see #Info
            
             @deprecated Use the Info property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParseException.GetDetails">
             Returns the additional detailed error information.
            
             @return the additional detailed error information
            
             @see #Details
            
             @deprecated Use the Details property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParseException.GetLine">
             Returns the line number where the error occured.
            
             @return the line number of the error, or
                     -1 if unknown
            
             @see #Line
            
             @deprecated Use the Line property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParseException.GetColumn">
             Returns the column number where the error occured.
            
             @return the column number of the error, or
                     -1 if unknown
            
             @see #Column
            
             @deprecated Use the Column property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParseException.GetMessage">
             Returns a default error message.
            
             @return a default error message
            
             @see #Message
            
             @deprecated Use the Message property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParseException.GetErrorMessage">
             Returns the error message. This message will contain all the
             information available, except for the line and column number
             information.
            
             @return the error message
            
             @see #ErrorMessage
            
             @deprecated Use the ErrorMessage property instead.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParseException.GetMessageDetails">
             Returns a string containing all the detailed information in
             a list. The elements are separated with a comma.
            
             @return the detailed information string
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParseException.Type">
             The error type property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParseException.Info">
             The additional error information property (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParseException.Details">
             The additional detailed error information property
             (read-only).
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParseException.Line">
             The line number property (read-only). This is the line
             number where the error occured, or -1 if unknown.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParseException.Column">
             The column number property (read-only). This is the column
             number where the error occured, or -1 if unknown.
            
             @since 1.5
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParseException.Message">
             The message property (read-only). This property contains
             the detailed exception error message, including line and
             column numbers when available.
            
             @see #ErrorMessage
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParseException.ErrorMessage">
             The error message property (read-only). This property
             contains all the information available, except for the line
             and column number information.
            
             @see #Message
            
             @since 1.5
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.ParseException.ErrorType">
            The error type enumeration.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.ErrorType.INTERNAL">
            The internal error type is only used to signal an error
            that is a result of a bug in the parser or tokenizer
            code.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.ErrorType.IO">
            The I/O error type is used for stream I/O errors.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.ErrorType.UNEXPECTED_EOF">
            The unexpected end of file error type is used when end
            of file is encountered instead of a valid token.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.ErrorType.UNEXPECTED_CHAR">
            The unexpected character error type is used when a
            character is read that isn't handled by one of the
            token patterns.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.ErrorType.UNEXPECTED_TOKEN">
            The unexpected token error type is used when another
            token than the expected one is encountered.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.ErrorType.INVALID_TOKEN">
            The invalid token error type is used when a token
            pattern with an error message is matched. The
            additional information provided should contain the
            error message.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.ParseException.ErrorType.ANALYSIS">
            The analysis error type is used when an error is
            encountered in the analysis. The additional information
            provided should contain the error message.
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement" -->
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.DOT">
            The dot ('.') character set. This element matches a single
            character that is not equal to a newline character.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.DIGIT">
            The digit character set. This element matches a single
            numeric character.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.NON_DIGIT">
            The non-digit character set. This element matches a single
            non-numeric character.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.WHITESPACE">
            The whitespace character set. This element matches a single
            whitespace character.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.NON_WHITESPACE">
            The non-whitespace character set. This element matches a
            single non-whitespace character.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.WORD">
            The word character set. This element matches a single word
            character.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.NON_WORD">
            The non-word character set. This element matches a single
            non-word character.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.inverted">
            The inverted character set flag.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.contents">
            The character set content. This array may contain either
            range objects or Character objects.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.#ctor(System.Boolean)">
             Creates a new character set element. If the inverted character
             set flag is set, only characters NOT in the set will match.
            
             @param inverted       the inverted character set flag
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.AddCharacter(System.Char)">
             Adds a single character to this character set.
            
             @param c              the character to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.AddCharacters(System.String)">
             Adds multiple characters to this character set.
            
             @param str            the string with characters to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.AddCharacters(PerCederberg.Grammatica.Runtime.RE.StringElement)">
             Adds multiple characters to this character set.
            
             @param elem           the string element with characters to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.AddRange(System.Char,System.Char)">
             Adds a character range to this character set.
            
             @param min            the minimum character value
             @param max            the maximum character value
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.AddCharacterSet(PerCederberg.Grammatica.Runtime.RE.CharacterSetElement)">
             Adds a character subset to this character set.
            
             @param elem           the character set to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.Clone">
             Returns this element as the character set shouldn't be
             modified after creation. This partially breaks the contract
             of clone(), but as new characters are not added to the
             character set after creation, this will work correctly.
            
             @return this character set element
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.Match(PerCederberg.Grammatica.Runtime.RE.Matcher,PerCederberg.Grammatica.Runtime.ReaderBuffer,System.Int32,System.Int32)">
             Returns the length of a matching string starting at the
             specified position. The number of matches to skip can also be
             specified, but numbers higher than zero (0) cause a failed
             match for any element that doesn't attempt to combine other
             elements.
            
             @param m              the matcher being used
             @param buffer         the input character buffer to match
             @param start          the starting position
             @param skip           the number of matches to skip
            
             @return the length of the matching string, or
                     -1 if no match was found
            
             @throws IOException if an I/O error occurred
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.InSet(System.Char)">
             Checks if the specified character matches this character
             set. This method takes the inverted flag into account.
            
             @param c               the character to check
            
             @return true if the character matches, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.InDotSet(System.Char)">
             Checks if the specified character is present in the 'dot'
             set. This method does not consider the inverted flag.
            
             @param c               the character to check
            
             @return true if the character is present, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.InDigitSet(System.Char)">
             Checks if the specified character is a digit. This method
             does not consider the inverted flag.
            
             @param c               the character to check
            
             @return true if the character is a digit, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.InWhitespaceSet(System.Char)">
             Checks if the specified character is a whitespace
             character. This method does not consider the inverted flag.
            
             @param c               the character to check
            
             @return true if the character is a whitespace character, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.InWordSet(System.Char)">
             Checks if the specified character is a word character. This
             method does not consider the inverted flag.
            
             @param c               the character to check
            
             @return true if the character is a word character, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.InUserSet(System.Char)">
             Checks if the specified character is present in the user-
             defined set. This method does not consider the inverted
             flag.
            
             @param value           the character to check
            
             @return true if the character is present, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.PrintTo(System.IO.TextWriter,System.String)">
             Prints this element to the specified output stream.
            
             @param output         the output stream to use
             @param indent         the current indentation
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.ToString">
             Returns a string description of this character set.
            
             @return a string description of this character set
        </member>
        <member name="T:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.Range">
            A character range class.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.Range.min">
            The minimum character value.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.Range.max">
            The maximum character value.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.Range.#ctor(System.Char,System.Char)">
             Creates a new character range.
            
             @param min        the minimum character value
             @param max        the maximum character value
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.Range.Inside(System.Char)">
             Checks if the specified character is inside the range.
            
             @param c          the character to check
            
             @return true if the character is in the range, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.RE.CharacterSetElement.Range.ToString">
             Returns a string representation of this object.
            
             @return a string representation of this object
        </member>
        <member name="T:ExpressionTokenizer">
            <remarks>A character stream tokenizer.</remarks>
        </member>
        <member name="M:ExpressionTokenizer.#ctor(System.IO.TextReader,Ciloci.Flee.ExpressionContext)">
             <summary>Creates a new tokenizer for the specified input
             stream.</summary>
            
             <param name="input">the input stream to read</param>
             <param name="expressionContext">the expression context to work on</param>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParserCreationException">if the tokenizer
             couldn't be initialized correctly</exception>
        </member>
        <member name="M:ExpressionTokenizer.CreatePatterns">
             <summary>Initializes the tokenizer by creating all the token
             patterns.</summary>
            
             <exception cref="T:PerCederberg.Grammatica.Runtime.ParserCreationException">if the tokenizer
             couldn't be initialized correctly</exception>
        </member>
        <member name="T:Ciloci.Flee.CalcEngine.BatchLoader">
            <summary>
      Represents a class that can be used to populate the calculation engine in one batch.
    </summary><remarks>
      Normally, you have to add an expression to the calculation engine after any expressions it depends on.  By using this class, you can load expressions in any order and
      then have them be loaded into the calculation engine in one call.
    </remarks>
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.BatchLoader.Add(System.String,System.String,Ciloci.Flee.ExpressionContext)">
            <summary>
      Adds an expression to the batch loader.
    </summary><param name="atomName">The name that the expression will be associated with</param><param name="expression">The expression to add</param><param name="context">The context for the expression</param><remarks>Use this method to add an expression to the batch loader and associate it with a name</remarks>
        </member>
        <member name="M:Ciloci.Flee.CalcEngine.BatchLoader.Contains(System.String)">
            <!-- Aucun élément correspondant n'a été trouvé pour la balise include suivante --><include file="Resources/DocComments.xml" path="DocComments/Member[@atomName=&quot;BatchLoader.Contains&quot;]/*"/>
        </member>
        <member name="T:Ciloci.Flee.ExpressionContext">
            <summary>Class that holds all information required to create an expression</summary><remarks>This class holds all information required to create an expression.</remarks><threadsafety instance="true">The CompileDynamic and CompileGeneric methods are thread-safe.</threadsafety><example>
        This example shows how to create an evaluate an expression:
        <code lang="C#">
// Define the context of our expression
ExpressionContext context = new ExpressionContext();
// Allow the expression to use all static public methods of System.Math
context.Imports.AddType(typeof(Math));

// Define an int variable
context.Variables["a"] = 100;

// Create a dynamic expression that evaluates to an Object
IDynamicExpression eDynamic = context.CompileDynamic("sqrt(a) + pi");
// Create a generic expression that evaluates to a double
IGenericExpression&lt;double&gt; eGeneric = context.CompileGeneric&lt;double&gt;("sqrt(a) + pi");

// Evaluate the expressions
double result = (double)eDynamic.Evaluate();
result = eGeneric.Evaluate();

// Update the value of our variable
context.Variables["a"] = 144;
// Evaluate again to get the updated result
result = eGeneric.Evaluate();</code>
      </example>
        </member>
        <member name="F:Ciloci.Flee.ExpressionContext.MyVariables">
            <remarks>Keep variables as a field to make access fast</remarks>
        </member>
        <member name="M:Ciloci.Flee.ExpressionContext.#ctor">
            <summary>Creates a new expression context with the default expression owner.</summary><remarks>Use this constructor to create an expression context when you don't plan to use an expression owner.</remarks>
        </member>
        <member name="M:Ciloci.Flee.ExpressionContext.#ctor(System.Object)">
            <summary>Creates a new expression context with a specified expression owner.</summary><param name="expressionOwner">The expression owner instance to use</param><remarks>Use this constructor to create an expression context when you want to supply an expression owner.</remarks>
        </member>
        <member name="M:Ciloci.Flee.ExpressionContext.Clone">
            <summary>Creates a copy of the current context.</summary><returns>An identical copy of the current context</returns><remarks>Use this method when you need an indentical copy of an existing context.  Note that</remarks>
        </member>
        <member name="M:Ciloci.Flee.ExpressionContext.CompileDynamic(System.String)">
            <summary>Creates a dynamic expression (one that evaluates to Object) from an expression text string and the current context</summary><param name="expression">The expression text to parse</param><returns>A new dynamic expression</returns><remarks>
        Use this method when you want to create an expression that evaluates to an Object.  "Dynamic" means that the result type
        of the expression can be anything and is not fixed as with a generic expression.
        <note>
        The context, imports, and options of the compiled expression will be a clone of the originals.  The variables however
        are not cloned and will point to the same instance.
        </note>
      </remarks><exception cref="T:Ciloci.Flee.ExpressionCompileException">The expression could not be compiled</exception>
        </member>
        <member name="M:Ciloci.Flee.ExpressionContext.CompileGeneric``1(System.String)">
            <summary>Creates a generic expression from an expression text string and the current context</summary><typeparam name="TResultType">The type that the expression evaluates to</typeparam><param name="expression">The expression text to parse</param><returns>A new generic expression</returns><remarks>
        Use this method when you want to create an expression that evaluates to a strongly-typed value.
        <note>
        The context, imports, and options of the compiled expression will be a clone of the originals.  The variables however
        are not cloned and will point to the same instance.
        </note>
      </remarks><exception cref="T:Ciloci.Flee.ExpressionCompileException">The expression could not be compiled</exception>
        </member>
        <member name="P:Ciloci.Flee.ExpressionContext.Options">
            <summary>Gets the ExpressionOptions to be used in an expression</summary><value>The ExpressionOptions instance</value><remarks>Use this property to access the options to be used in an expression.</remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionContext.Imports">
            <summary>
        Gets the types imported by an expression.
      </summary><value>The collection of imported types.</value><remarks>
        Use this property to get the imports that will be used by an expression.<seealso cref="T:Ciloci.Flee.ImportsCollection"/>
      </remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionContext.Variables">
            <summary>Gets the variables available to an expression</summary><value>The VariableCollection instance</value><remarks>Use this property to get collection of variables available to an expression.</remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionContext.CalculationEngine">
            <summary>Gets the CalculationEngine instance used by the expression.</summary><value>The CalculationEngine instance</value><remarks>Use this property to get CalculationEngine instance used by an expression</remarks>
        </member>
        <member name="P:Ciloci.Flee.ExpressionContext.ParserOptions">
            <summary>Gets the ExpressionParserOptions for this context.</summary><value>The ExpressionParserOptions instance</value><remarks>Use this property to customize the expression parser.</remarks>
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.ParserLogException" -->
        <member name="F:PerCederberg.Grammatica.Runtime.ParserLogException.errors">
            The list of errors found.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParserLogException.#ctor">
            Creates a new empty parser log exception.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParserLogException.GetErrorCount">
             Returns the number of errors in this log.
            
             @return the number of errors in this log
            
             @see #Count
            
             @deprecated Use the Count property instead.
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "M:PerCederberg.Grammatica.Runtime.ParserLogException.GetError(System.Int32)" -->
        <member name="M:PerCederberg.Grammatica.Runtime.ParserLogException.AddError(PerCederberg.Grammatica.Runtime.ParseException)">
             Adds a parse error to the log.
            
             @param e              the parse error to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.ParserLogException.GetMessage">
             Returns the detailed error message. This message will contain
             the error messages from all errors in this log, separated by
             a newline.
            
             @return the detailed error message
            
             @see #Message
            
             @deprecated Use the Message property instead.
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParserLogException.Message">
            The message property (read-only). This property contains
            the detailed exception error message.
        </member>
        <member name="P:PerCederberg.Grammatica.Runtime.ParserLogException.Count">
             The error count property (read-only).
            
             @since 1.5
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "P:PerCederberg.Grammatica.Runtime.ParserLogException.Item(System.Int32)" -->
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.LookAheadSet" -->
        <member name="F:PerCederberg.Grammatica.Runtime.LookAheadSet.elements">
            The set of token look-ahead sequences. Each sequence in
            turn is represented by an ArrayList with Integers for the
            token id:s.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.LookAheadSet.maxLength">
            The maximum length of any look-ahead sequence.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.#ctor(System.Int32)">
             Creates a new look-ahead set with the specified maximum
             length.
            
             @param maxLength      the maximum token sequence length
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.#ctor(System.Int32,PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Creates a duplicate look-ahead set, possibly with a
             different maximum length.
            
             @param maxLength      the maximum token sequence length
             @param set            the look-ahead set to copy
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Size">
             Returns the size of this look-ahead set.
            
             @return the number of token sequences in the set
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.GetMinLength">
             Returns the length of the shortest token sequence in this
             set. This method will return zero (0) if the set is empty.
            
             @return the length of the shortest token sequence
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.GetMaxLength">
             Returns the length of the longest token sequence in this
             set. This method will return zero (0) if the set is empty.
            
             @return the length of the longest token sequence
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.GetInitialTokens">
             Returns a list of the initial token id:s in this look-ahead
             set. The list returned will not contain any duplicates.
            
             @return a list of the inital token id:s in this look-ahead set
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.IsRepetitive">
             Checks if this look-ahead set contains a repetitive token
             sequence.
            
             @return true if at least one token sequence is repetitive, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.IsNext(PerCederberg.Grammatica.Runtime.Parser)">
             Checks if the next token(s) in the parser match any token
             sequence in this set.
            
             @param parser         the parser to check
            
             @return true if the next tokens are in the set, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.IsNext(PerCederberg.Grammatica.Runtime.Parser,System.Int32)">
             Checks if the next token(s) in the parser match any token
             sequence in this set.
            
             @param parser         the parser to check
             @param length         the maximum number of tokens to check
            
             @return true if the next tokens are in the set, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.IsOverlap(PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Checks if another look-ahead set has an overlapping token
             sequence. An overlapping token sequence is a token sequence
             that is identical to another sequence, but for the length.
             I.e. one of the two sequences may be longer than the other.
            
             @param set            the look-ahead set to check
            
             @return true if there is some token sequence that overlaps, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.IsOverlap(PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence)">
             Checks if a token sequence is overlapping. An overlapping token
             sequence is a token sequence that is identical to another
             sequence, but for the length. I.e. one of the two sequences may
             be longer than the other.
            
             @param seq            the token sequence to check
            
             @return true if there is some token sequence that overlaps, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Contains(PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence)">
             Checks if the specified token sequence is present in the
             set.
            
             @param elem           the token sequence to check
            
             @return true if the sequence is present in this set, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Intersects(PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Checks if some token sequence is present in both this set
             and a specified one.
            
             @param set            the look-ahead set to compare with
            
             @return true if the look-ahead sets intersect, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.FindSequence(PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence)">
             Finds an identical token sequence if present in the set.
            
             @param elem           the token sequence to search for
            
             @return an identical the token sequence if found, or
                     null if not found
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Add(PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence)">
             Adds a token sequence to this set. The sequence will only
             be added if it is not already in the set. Also, if the
             sequence is longer than the allowed maximum, a truncated
             sequence will be added instead.
            
             @param seq            the token sequence to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Add(System.Int32)">
             Adds a new token sequence with a single token to this set.
             The sequence will only be added if it is not already in the
             set.
            
             @param token          the token to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.AddAll(PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Adds all the token sequences from a specified set. Only
             sequences not already in this set will be added.
            
             @param set            the set to add from
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.AddEmpty">
            Adds an empty token sequence to this set. The sequence will
            only be added if it is not already in the set.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Remove(PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence)">
             Removes a token sequence from this set.
            
             @param seq            the token sequence to remove
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.RemoveAll(PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Removes all the token sequences from a specified set. Only
             sequences already in this set will be removed.
            
             @param set            the set to remove from
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.CreateNextSet(System.Int32)">
             Creates a new look-ahead set that is the result of reading
             the specified token. The new look-ahead set will contain
             the rest of all the token sequences that started with the
             specified token.
            
             @param token          the token to read
            
             @return a new look-ahead set containing the remaining tokens
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.CreateIntersection(PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Creates a new look-ahead set that is the intersection of
             this set with another set. The token sequences in the net
             set will only have the repeat flag set if it was set in
             both the identical token sequences.
            
             @param set            the set to intersect with
            
             @return a new look-ahead set containing the intersection
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.CreateCombination(PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Creates a new look-ahead set that is the combination of
             this set with another set. The combination is created by
             creating new token sequences that consist of appending all
             elements from the specified set onto all elements in this
             set. This is sometimes referred to as the cartesian
             product.
            
             @param set            the set to combine with
            
             @return a new look-ahead set containing the combination
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.CreateOverlaps(PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Creates a new look-ahead set with overlaps from another. All
             token sequences in this set that overlaps with the other set
             will be added to the new look-ahead set.
            
             @param set            the look-ahead set to check with
            
             @return a new look-ahead set containing the overlaps
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.CreateFilter(PerCederberg.Grammatica.Runtime.LookAheadSet)">
             Creates a new look-ahead set filter. The filter will contain
             all sequences from this set, possibly left trimmed by each one
             of the sequences in the specified set.
            
             @param set            the look-ahead set to trim with
            
             @return a new look-ahead set filter
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.CreateRepetitive">
             Creates a new identical look-ahead set, except for the
             repeat flag being set in each token sequence.
            
             @return a new repetitive look-ahead set
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.ToString">
             Returns a string representation of this object.
            
             @return a string representation of this object
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.ToString(PerCederberg.Grammatica.Runtime.Tokenizer)">
             Returns a string representation of this object.
            
             @param tokenizer      the tokenizer containing the tokens
            
             @return a string representation of this object
        </member>
        <!-- Commentaire XML incorrect ignoré pour le membre "T:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence" -->
        <member name="F:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.repeat">
            The repeat flag. If this flag is set, the token
            sequence or some part of it may be repeated infinitely.
        </member>
        <member name="F:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.tokens">
            The list of token ids in this sequence.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.#ctor">
            Creates a new empty token sequence. The repeat flag
            will be set to false.
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.#ctor(System.Boolean,System.Int32)">
             Creates a new token sequence with a single token.
            
             @param repeat         the repeat flag value
             @param token          the token to add
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.#ctor(System.Int32,PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence)">
             Creates a new token sequence that is a duplicate of
             another sequence. Only a limited number of tokens will
             be copied however. The repeat flag from the original
             will be kept intact.
            
             @param length         the maximum number of tokens to copy
             @param seq            the sequence to copy
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.#ctor(System.Boolean,PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence)">
             Creates a new token sequence that is a duplicate of
             another sequence. The new value of the repeat flag will
             be used however.
            
             @param repeat         the new repeat flag value
             @param seq            the sequence to copy
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.Length">
             Returns the length of the token sequence.
            
             @return the number of tokens in the sequence
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.GetToken(System.Int32)">
             Returns a token at a specified position in the sequence.
            
             @param pos            the sequence position
            
             @return the token id found, or null
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.Equals(System.Object)">
             Checks if this sequence is equal to another object.
             Only token sequences with the same tokens in the same
             order will be considered equal. The repeat flag will be
             disregarded.
            
             @param obj            the object to compare with
            
             @return true if the objects are equal, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.Equals(PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence)">
             Checks if this sequence is equal to another sequence.
             Only sequences with the same tokens in the same order
             will be considered equal. The repeat flag will be
             disregarded.
            
             @param seq            the sequence to compare with
            
             @return true if the sequences are equal, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.GetHashCode">
             Returns a hash code for this object.
            
             @return a hash code for this object
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.StartsWith(PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence)">
             Checks if this token sequence starts with the tokens from
             another sequence. If the other sequence is longer than this
             sequence, this method will always return false.
            
             @param seq            the token sequence to check
            
             @return true if this sequence starts with the other, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.IsRepetitive">
             Checks if this token sequence is repetitive. A repetitive
             token sequence is one with the repeat flag set.
            
             @return true if this token sequence is repetitive, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.IsNext(PerCederberg.Grammatica.Runtime.Parser)">
             Checks if the next token(s) in the parser matches this
             token sequence.
            
             @param parser         the parser to check
            
             @return true if the next tokens are in the sequence, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.IsNext(PerCederberg.Grammatica.Runtime.Parser,System.Int32)">
             Checks if the next token(s) in the parser matches this
             token sequence.
            
             @param parser         the parser to check
             @param length         the maximum number of tokens to check
            
             @return true if the next tokens are in the sequence, or
                     false otherwise
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.ToString">
             Returns a string representation of this object.
            
             @return a string representation of this object
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.ToString(PerCederberg.Grammatica.Runtime.Tokenizer)">
             Returns a string representation of this object.
            
             @param tokenizer      the tokenizer containing the tokens
            
             @return a string representation of this object
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.Concat(System.Int32,PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence)">
             Creates a new token sequence that is the concatenation
             of this sequence and another. A maximum length for the
             new sequence is also specified.
            
             @param length         the maximum length of the result
             @param seq            the other sequence
            
             @return the concatenated token sequence
        </member>
        <member name="M:PerCederberg.Grammatica.Runtime.LookAheadSet.Sequence.Subsequence(System.Int32)">
             Creates a new token sequence that is a subsequence of
             this one.
            
             @param start          the subsequence start position
            
             @return the new token subsequence
        </member>
        <member name="T:Ciloci.Flee.FleeILGenerator">
            <summary>
            Wraps a regular IL generator and provides additional functionality we need
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Ciloci.Flee.CalcEngine.NodeEventArgs">
            <summary>
  Provides the data for the NodeRecalculated event.
  </summary><remarks>Use the members of this class to get additional information about the recalculated node.</remarks>	
        </member>
        <member name="P:Ciloci.Flee.CalcEngine.NodeEventArgs.Name">
            <summary>
    Gets the name of the recalculated node.
  </summary><value>The name of the node</value><remarks>
    Use this property to get the name of the recalculated node.
  </remarks>	
        </member>
        <member name="P:Ciloci.Flee.CalcEngine.NodeEventArgs.Result">
            <summary>
    Gets the recalculated result of the node.
  </summary><value>The value of the result</value><remarks>
    Use this property to get the recalculated result of the node.
  </remarks>	
        </member>
    </members>
</doc>
